[
  {
    "__docId__": 0,
    "kind": "file",
    "name": "js/home.js",
    "content": "window.onload = function () {\n  // This is being moved from HTML to JS to reduce global pollution, and other concerns, as well as remove ESLinter complaints\n\n  homePageInit();\n\n  firstTimeSetup();\n\n  // Then functions to fill out data of the forms\n  //addFormCategory();\n  initInstalledPluginListToForm();\n\n  // Functions to allow setting and changing Header Plugins\n  headerPlugins();\n};\n\nfunction homePageInit(type) {\n  // this is called during first page load and as a callback to template hot reloading\n\n  filterSelection(\"all\");\n\n  var btnContainer = document.getElementById(\"btnContainer\");\n  var btns = btnContainer.getElementsByClassName(\"btn\");\n  for (var i = 0; i < btns.length; i++) {\n    btns[i].addEventListener(\"click\", function () {\n      var current = document.getElementsByClassName(\"active\");\n      current[0].className = current[0].className.replace(\" active\", \"\");\n      this.className += \" active\";\n    });\n  }\n\n  // now keeping in mind that once a hot-reload occurs all plugins will lose their references to the DOM.\n  // so plugins must be reloaded, which can easily occur by reattaching thhem to the dom.\n  // plugins do have the custom data-plugin-type=\"iitem\" attached that we can use.\n  if (typeof type === \"string\") {\n    if (type == \"reload\") {\n      reloadPluginJS();\n    }\n  }\n\n  // now we want to also listen on the search bar\n  const searchBar = document.getElementById(\"searchBar\");\n\n  searchBar.addEventListener(\"input\", searchBarUpdate);\n}\n\nfunction reloadPluginJS() {\n  var pluginList = document.querySelectorAll(\"[data-plugin-type]\");\n\n  for (var i = 0; i < pluginList.length; i++) {\n    var newScript = document.createElement(\"script\");\n    // pluginList[i].src returns the process src, as in the absoulte URL, to ensure that its identical, we will grab the relative\n    newScript.src = pluginList[i].attributes.src.nodeValue;\n    // but this still doesn't actual reload the script which may be a browser caching issue, we can add a cache buster\n    if (newScript.src.includes(\"cachebuster\")) {\n      // added check for pre-existing cachebuster value, to only modify the exisitng one, rather than append endlessly\n      newScript.src = newScript.src.replace(\n        /[?]cachebuster=[0-9]+/,\n        `?cachebuster=${new Date().getTime()}`\n      );\n    } else {\n      newScript.src = `${newScript.src}?cachebuster=${new Date().getTime()}`;\n    }\n    newScript.type = pluginList[i].type;\n    newScript.dataset.pluginType = pluginList[i].dataset.pluginType;\n\n    // with the new script dom element created, remove the current one then append thhis one.\n    pluginList[i].remove();\n    document.body.appendChild(newScript);\n  }\n}\n\nfunction filterSelection(c) {\n  var filterDivElement = document.getElementsByClassName(\"filterDiv\");\n\n  if (c == \"all\") {\n    c = \"\";\n  }\n\n  for (var i = 0; i < filterDivElement.length; i++) {\n    removeClass(filterDivElement[i], \"show\");\n    if (filterDivElement[i].className.indexOf(c) > -1) {\n      addClass(filterDivElement[i], \"show\");\n    }\n  }\n}\n\nfunction removeClass(element, name) {\n  var elementClasses = element.className.split(\" \");\n  var provNames = name.split(\" \");\n  for (var i = 0; i < provNames.length; i++) {\n    while (elementClasses.indexOf(provNames[i]) > -1) {\n      elementClasses.splice(elementClasses.indexOf(provNames[i]), 1);\n    }\n  }\n  element.className = elementClasses.join(\" \");\n}\n\nfunction addClass(element, name) {\n  var elementClasses = element.className.split(\" \");\n  var provNames = name.split(\" \");\n  for (var i = 0; i < provNames.length; i++) {\n    if (elementClasses.indexOf(provNames[i]) == -1) {\n      element.className += \" \" + provNames[i];\n    }\n  }\n}\n\nfunction searchBarUpdate(e) {\n  console.log(e.target.value);\n  fetch(`/api/search?source='home'&term='${e.target.value}'`)\n    .then((res) => res.json())\n    .then((result) => {\n      try {\n        var searchResults = document.getElementById(\"searchResult\");\n        // first we want to remove all previous search results\n        while (searchResults.firstChild) {\n          searchResults.removeChild(searchResults.lastChild);\n        }\n\n        for (let i = 0; i < result.Results.length; i++) {\n          var tmpHTML = `<p><a href=\"${result.Results[i].Link}\">${result.Results[i].FriendlyName} #Category: ${result.Results[i].Category}</a></p>`;\n          searchResults.insertAdjacentHTML(\"beforeend\", tmpHTML);\n        }\n        //searchBar.insertAdjacentHTML(\"afterend\", )\n      } catch (err) {\n        console.log(`Error Occured crafting Search Results: ${err}`);\n      }\n    });\n}\n\nclass LinkItemDOM {\n  constructor() {\n    // for non-plugin data we can use the FormData Object Constructor\n    this.FormData = new FormData(document.getElementById(\"link-item-form\"));\n    // An element object is needed to properly retreive some values.\n    this.FormDom = document.getElementById(\"link-item-form\");\n  }\n\n  get jsonObjTemplate() {\n    var _jsonObjTemplate = {\n      id: 0,\n      friendlyName: \"\",\n      link: \"\",\n      category: \"\",\n      colour: \"\",\n      style: \"\",\n      plugins: [],\n    };\n\n    return _jsonObjTemplate;\n  }\n\n  get jsonObjFilled() {\n    var tmpObj = this.jsonObjTemplate;\n\n    tmpObj.id = this.staticIDField;\n    tmpObj.friendlyName = this.friendlyNameField;\n    tmpObj.link = this.linkField;\n    tmpObj.category = this.categoryField;\n    tmpObj.colour = this.colourField;\n    tmpObj.style = this.styleField;\n    tmpObj.plugins = this.pluginField;\n\n    return tmpObj;\n  }\n\n  set jsonObjFill(input) {\n    this.staticIDField = input.id;\n    this.friendlyNameField = input.friendlyName;\n    this.linkField = input.link;\n    this.categoryField = input.category;\n    this.colourField = input.colour;\n    this.styleField = input.style;\n    this.pluginField = input.plugins;\n  }\n\n  jsonObjClear() {\n    this.staticIDField = \"\";\n    this.friendlyNameField = \"\";\n    this.linkField = \"\";\n    this.categoryField = \"\";\n    this.colourField = \"\";\n    this.styleField = \"\";\n    this.emptyPlugins();\n  }\n\n  get staticIDField() {\n    return this.FormData.getAll(\"staticID\")[0];\n  }\n\n  set staticIDField(input) {\n    this.FormDom.querySelector(`[name=\"staticID\"]`).value = input;\n  }\n\n  get friendlyNameField() {\n    return this.FormData.getAll(\"friendlyName\")[0];\n  }\n\n  set friendlyNameField(input) {\n    this.FormDom.querySelector(`[name=\"friendlyName\"]`).value = input;\n  }\n\n  get linkField() {\n    return this.FormData.getAll(\"link\")[0];\n  }\n\n  set linkField(input) {\n    this.FormDom.querySelector(`[name=\"link\"]`).value = input;\n  }\n\n  get categoryField() {\n    return this.FormData.getAll(\"category\")[0];\n  }\n\n  set categoryField(input) {\n    this.FormDom.querySelector(`[name=\"category\"]`).value = input;\n  }\n\n  get colourField() {\n    return this.FormData.getAll(\"colour\")[0];\n  }\n\n  set colourField(input) {\n    this.FormDom.querySelector(`[name=\"colour\"]`).value = input;\n  }\n\n  get styleField() {\n    return this.FormData.getAll(\"style\")[0];\n  }\n\n  set styleField(input) {\n    this.FormDom.querySelector(`[name=\"style\"]`).value = input;\n  }\n\n  get pluginField() {\n    // Using the Element Method querySelectorAll list to get an array of Plugin Form NodeLists\n    var pluginNodeList = this.FormDom.querySelectorAll(\n      `[class=\"additional_info\"]`\n    );\n    var psuedoPluginArray = [];\n\n    for (var i = 0; i < pluginNodeList.length; i++) {\n      // with our []NodeLists we will first take the child section of pluginAddContainer\n      var htmlCollectionPlugin = pluginNodeList[i].children[0];\n\n      var tmpObjPlugin = {\n        name: \"\",\n        location: \"\",\n        options: \"\",\n      };\n      // while this was originally a public field, there was an issue of what seemed to be desctructuring of the object, once added to the array.\n      // where the length of the array was correct, but all values would be the last item added. Meaning the public field\n      // seems to create a reference when instiated as a variable, rather than a new declaration.\n\n      tmpObjPlugin.name =\n        htmlCollectionPlugin.querySelectorAll(`[name=\"pluginName\"]`)[0].value;\n      tmpObjPlugin.location = htmlCollectionPlugin.querySelectorAll(\n        `[name=\"pluginLocation\"]`\n      )[0].value;\n      tmpObjPlugin.options = htmlCollectionPlugin.querySelectorAll(\n        `[name=\"pluginOptions\"]`\n      )[0].value;\n\n      // now before we push we want to do simple validation on this data.\n      if (!this.notEmpty(tmpObjPlugin.name)) {\n        // if no name is assigned, we can skip adding the plugin completely\n        continue;\n      }\n\n      psuedoPluginArray.push(tmpObjPlugin);\n    }\n\n    return psuedoPluginArray;\n  }\n\n  set pluginField(input) {\n    // pluginField expects an input of only plugin array\n    for (var i = 0; i < input.length; i++) {\n      //firstly create the plugin item\n      addPluginToFormV2();\n      var pluginNodeList = this.FormDom.querySelectorAll(\n        `[class=\"additional_info\"]`\n      );\n      var htmlCollectionPlugin = pluginNodeList[i].children[0];\n      htmlCollectionPlugin.querySelectorAll(`[name=\"pluginName\"]`)[0].value =\n        input[i].name;\n      htmlCollectionPlugin.querySelectorAll(\n        `[name=\"pluginLocation\"]`\n      )[0].value = input[i].location;\n      htmlCollectionPlugin.querySelectorAll(`[name=\"pluginOptions\"]`)[0].value =\n        input[i].options;\n    }\n  }\n\n  emptyPlugins() {\n    while (document.getElementsByClassName(\"add-plugin-link\").length > 1) {\n      try {\n        document\n          .getElementsByClassName(\"add-plugin-link\")\n          [\n            document.getElementsByClassName(\"add-plugin-link\").length - 1\n          ].parentNode.remove();\n      } catch (err) {\n        throw err;\n      }\n    }\n    // ^^ The above while loop, will run until only 1 elemenet remains for the add-plugin-link dom element\n    // each loop gets the HTMLCollection of the element, grabbing only the last one, then selects its parentNode (form-text)\n    // and removes it. This should onyl leave the last dom element to add plugins as intended\n\n    // Now we just need to remove any data still present in that last element, and change its display\n    var htmlCollectionPlugin = this.FormDom.querySelectorAll(\n      `[class=\"additional_info\"]`\n    )[0].children[0];\n    htmlCollectionPlugin.querySelectorAll(`[name=\"pluginName\"]`)[0].value = \"\";\n    htmlCollectionPlugin.querySelectorAll(`[name=\"pluginLocation\"]`)[0].value =\n      \"\";\n    htmlCollectionPlugin.querySelectorAll(`[name=\"pluginOptions\"]`)[0].value =\n      \"\";\n    htmlCollectionPlugin.querySelectorAll(`[name=\"pluginExample\"]`)[0].value =\n      \"\";\n    htmlCollectionPlugin.parentElement.style.display = \"none\";\n  }\n\n  notEmpty(input) {\n    if (typeof input === \"string\") {\n      if (input === \"\" || input === \" \") {\n        return false;\n      } else {\n        return true;\n      }\n    } else {\n      // TODO: add support for other types, but this will fail open for now\n      return true;\n    }\n  }\n\n  extraValues(input) {\n    try {\n      if (input.length > 1) {\n        return true;\n      } else {\n        return false;\n      }\n    } catch (err) {\n      // if the length method fails, we can safely assume its not valid, and there are no extra values.\n      return false;\n    }\n  }\n}\n\nfunction addPluginToFormV2() {\n  var lastAddPluginItem =\n    document.getElementsByClassName(\"add-plugin-link\")[\n      document.getElementsByClassName(\"add-plugin-link\").length - 1\n    ];\n  // the last plugin should be the unexpanded plugin, until we change its display mode, and subsequently should have no information entered.\n\n  var clonedParent = lastAddPluginItem.parentElement.cloneNode(true);\n  lastAddPluginItem.parentElement.insertAdjacentElement(\n    \"afterend\",\n    clonedParent\n  );\n  // the lastAddPluginItem is the text adjacent to the plugin form.\n  // getting the parent allows us to have the full form-text div, which is what we want to duplicate and insert.\n\n  // now to chagne the display mode of the descendent div\n  var addInfoDescendent =\n    lastAddPluginItem.parentElement.getElementsByClassName(\n      \"additional_info\"\n    )[0];\n  addInfoDescendent.style.display = \"block\";\n}\n\nfunction getLinkItemForm() {\n  // --------\n  // Cyclomatic Complexity Pre-Class: 14\n  // Cyclomatic Complexity Post-Class: 6\n  // -------\n\n  // parseLinkItemForm will either return an object of JSON, or a string, containing an error message that is safe to display to the user.\n\n  let linkObj = new LinkItemDOM();\n  // We can ask for the filled template from the class\n  var linkObjData = linkObj.jsonObjFilled;\n\n  // now lets check the validity of the data gathered and react accordingly\n  if (!stringValidityNotEmpty(linkObjData.friendlyName)) {\n    return i18n_validateName;\n  } else if (!stringValidityNotEmpty(linkObjData.link)) {\n    return i18n_validateLink;\n  } else if (!stringValidityNotEmpty(linkObjData.category)) {\n    return i18n_validateCategory;\n  }\n\n  // then to check the plugin data validity\n  for (var i = 0; i < linkObjData.plugins.length; i++) {\n    if (!stringValidityNotEmpty(linkObjData.plugins[i].location)) {\n      return i18n_validatePluginLocation;\n    }\n  }\n\n  return linkObjData;\n}\n\nfunction clearLinkItemForm() {\n  // --------\n  // Cyclomatic Complexity Pre-Class: 2\n  // Cyclomatic Complexity Post-Class: 1\n  // -------\n\n  let linkItemObj = new LinkItemDOM();\n  linkItemObj.jsonObjClear();\n}\n\nfunction stringValidityNotEmpty(string) {\n  // this returns true if the passed string seems to be valid, false otherwise\n  try {\n    if (typeof string === \"string\") {\n      if (string == \"\") {\n        return false;\n      } else {\n        return true;\n      }\n    } else {\n      return false;\n    }\n  } catch (err) {\n    return false;\n  }\n}\n\n/*eslint-disable-next-line no-unused-vars*/\nfunction disablePluginLocation(element) {\n  document\n    .getElementById(\"plugin-location-list\")\n    .querySelector(`[value=${element.value}]`)\n    .setAttribute(\"disabled\", \"\");\n}\n\nfunction addPluginOptions(element) {\n  var pluginContainerParent = element.parentElement.parentElement.parentElement;\n  var pluginChosen = element.value;\n  var pluginOptions = pluginContainerParent.querySelector(\n    `[name=\"pluginOptions\"]`\n  );\n  var pluginExample = pluginContainerParent.querySelector(\n    `[name=\"pluginExample\"]`\n  );\n\n  // with the elements we want to modify, lets get the data needed\n  fetch(\"/plugins/installedPlugins.json\")\n    .then((res) => res.json())\n    .then((data) => {\n      data.forEach((element) => {\n        if (pluginChosen == element.name) {\n          pluginOptions.value = element.options.autofill;\n          pluginExample.value = element.options.explain;\n        }\n      });\n    });\n}\n\nfunction initInstalledPluginListToForm() {\n  fetch(\"/plugins/installedPlugins.json\")\n    .then((response) => response.json())\n    .then((data) => {\n      var pluginListToInsertItem, pluginListToInsertHeader;\n\n      data.forEach((element) => {\n        if (element.type == \"item\") {\n          pluginListToInsertItem += `<option value='${element.name}'>`;\n        } else if (element.type == \"header\") {\n          pluginListToInsertHeader += `<option value='${element.name}'>`;\n        }\n      });\n      document.getElementById(\"plugin-installed-list\").innerHTML =\n        pluginListToInsertItem;\n      document.getElementById(\"header-plugin-list\").innerHTML =\n        pluginListToInsertHeader;\n    });\n}\n\nfunction newItemModal() {\n  clearLinkItemForm();\n  universe.ShowModal(\"link-item-modal\");\n\n  var modalSubmit = document.getElementById(\"itemModalSubmit\");\n  var modalClose = document.getElementById(\"itemModalGoBack\");\n\n  modalClose.onclick = function () {\n    universe.CloseModal(\"link-item-modal\");\n  };\n\n  modalSubmit.onclick = function () {\n    // first we will display the loading icon\n    universe.Loader(true);\n\n    var formData = getLinkItemForm();\n\n    if (typeof formData === \"string\") {\n      universe.Loader(false);\n\n      universe.SnackbarError(\n        \"snackbar\",\n        formData,\n        false,\n        i18n_returnValueGenericError\n      );\n    } else if (typeof formData == \"object\") {\n      saveLinkItemModal(\"/api/new/\", formData, i18n_returnsSuccessAdd);\n    } else {\n      // if it fails, we will remove the loader to allow user interaction\n      universe.Loader(false);\n\n      universe.SnackbarError(\n        \"snackbar\",\n        i18n_returnValueGenericError,\n        false,\n        \"Something unexpected happened reading your data.\"\n      );\n    }\n  };\n}\n\nfunction editItemModal(\n  oldID,\n  oldFriendlyName,\n  oldLink,\n  oldCategory,\n  oldColour,\n  oldStyle,\n  oldPlugins\n) {\n  clearLinkItemForm();\n  // with the class for the Link Item DOM, we can work with that directly here, rather than using a useless interface function\n  let linkItemObj = new LinkItemDOM();\n  var jsonTemplate = linkItemObj.jsonObjTemplate;\n\n  jsonTemplate.id = parseInt(oldID);\n  jsonTemplate.friendlyName = oldFriendlyName;\n  jsonTemplate.link = oldLink;\n  jsonTemplate.category = oldCategory;\n  jsonTemplate.colour = oldColour;\n  jsonTemplate.style = oldStyle;\n\n  for (var i = 0; i < oldPlugins.length; i++) {\n    var tmpPluginJSON = {\n      name: oldPlugins[i].name,\n      location: oldPlugins[i].location,\n      options: oldPlugins[i].options,\n    };\n    jsonTemplate.plugins.push(tmpPluginJSON);\n  }\n\n  linkItemObj.jsonObjFill = jsonTemplate;\n\n  // once the data is injected into the page, we can display the modal\n  universe.ShowModal(\"link-item-modal\");\n\n  var modalSubmit = document.getElementById(\"itemModalSubmit\");\n  var modalClose = document.getElementById(\"itemModalGoBack\");\n\n  modalClose.onclick = function () {\n    universe.CloseModal(\"link-item-modal\");\n  };\n\n  modalSubmit.onclick = function () {\n    universe.Loader(true);\n\n    var formData = getLinkItemForm();\n\n    if (typeof formData === \"string\") {\n      universe.SnackbarError(\n        \"snackbar\",\n        formData,\n        false,\n        i18n_returnValueGenericError\n      );\n    } else if (typeof formData === \"object\") {\n      // before submitting this data we need to ensure the ID is an int, otherwise it'll fail.\n      formData.id = parseInt(formData.id);\n      saveLinkItemModal(\"/api/edit/\", formData, i18n_returnsSuccessUpdate);\n    } else {\n      universe.Loader(false);\n\n      universe.SnackbarError(\n        \"snackbar\",\n        i18n_returnValueGenericError,\n        false,\n        \"Something unexpected happned reading your data.\"\n      );\n    }\n  };\n}\n\nfunction saveLinkItemModal(endpoint, data, string) {\n  var rawJSON = JSON.stringify(data);\n\n  var requestOptions = universe.CreateJSONPOSTHeaders(rawJSON);\n\n  fetch(endpoint, requestOptions)\n    .then((response) => response.json())\n    .then((result) => {\n      if (result == \"Success\") {\n        // make sure to disable any loaders that may be displayed\n        universe.Loader(false);\n\n        universe.CloseModal(\"link-item-modal\");\n\n        universe.SnackbarCommon(\n          \"snackbar\",\n          langHandler.UnicornComposite(string, i18n_returnValueLinkItem),\n          universe.HotReload(\"linkItemList\", \"/\", homePageInit, \"reload\")\n        );\n      } else {\n        universe.Loader(false);\n\n        universe.SnackbarError(\n          \"snackbar\",\n          i18n_returnValueGenericError,\n          false,\n          result\n        );\n      }\n    });\n}\n\nfunction firstTimeSetup(dev) {\n  if (typeof dev !== \"boolean\") {\n    dev = false;\n  }\n  // this will check for any saved items, and if there are none, will display a helpful modal of options to get started.\n  fetch(\"/api/items\")\n    .then((res) => res.json())\n    .then((response) => {\n      if (response.length === 0 || dev) {\n        universe.ShowModal(\"firstTimeModal\");\n\n        // once visible we want to register an onclick handler with the now visible close button\n        var modalClose = document.getElementById(\"closeFirstTimeModal\");\n\n        // and another onclick handler for the submit language\n        var modalChangeLang = document.getElementById(\n          \"firstTimeModalLangSubmit\"\n        );\n\n        modalClose.onclick = function () {\n          universe.CloseModal(\"firstTimeModal\");\n        };\n\n        modalChangeLang.onclick = function () {\n          var modalChosenLang = document.getElementById(\"changeLang\");\n          var chosenLang = modalChosenLang.value;\n          fetch(`/api/changelang?lang=${chosenLang}`)\n            .then((res) => res.json())\n            .then((response) => {\n              universe.SnackbarCommon(\n                \"snackbar\",\n                langHandler.UnicornComposite(\n                  i18n_returnsSuccessUpdate,\n                  i18n_returnValueLangauge\n                ),\n                false,\n                false,\n                false,\n                false,\n                response\n              );\n            });\n        };\n      }\n    });\n}\n\n/*eslint disable-next-lin no-unused-vars*/\nfunction dataListInputHeader(ele) {\n  fetch(\"/plugins/installedPlugins.json\")\n    .then((res) => res.json())\n    .then((data) => {\n      data.forEach((element) => {\n        if (ele.value == element.name) {\n          if (element.config) {\n            // since the header modal only allows modifying a signle item at once, we don't need any checking of the element\n            dataListInputCaller(\n              \"header-plugin-label\",\n              \"header-plugin-example\",\n              \"header-plugin-options\",\n              element.options.explain,\n              element.options.autofill\n            );\n          }\n        }\n      });\n    });\n}\n\nfunction dataListInputCaller(\n  view,\n  explain,\n  autofill,\n  explainData,\n  autofillData\n) {\n  dataListInputChangeView(view);\n  dataListInputChangeExplain(explain, explainData);\n  dataListInputChangeAutofill(autofill, autofillData);\n}\n\nfunction dataListInputChangeView(eleName) {\n  var ele = document.getElementById(eleName);\n  ele.classList.remove(\"readonly_id\");\n}\n\nfunction dataListInputChangeExplain(eleName, explain) {\n  var ele = document.getElementById(eleName);\n  ele.innerHTML = explain;\n}\n\nfunction dataListInputChangeAutofill(eleName, autofill) {\n  var ele = document.getElementById(eleName);\n  ele.classList.remove(\"readonly_id\");\n  ele.removeAttribute(\"readonly\");\n  ele.value = autofill;\n}\n\n// Modal based JS\n\n// Previous links to delete in HTML: <div class=\"deleteItem\"> <a href=\"/delete/{{.Id}}\"> <img src=\"/assets/images/trash-2.svg\"> </a> </div>\n/*eslint-disable-next-line no-unused-vars*/\nfunction modalDelete(id) {\n  // this should be called when the delete button is hit\n  universe.ShowModal(\"deleteModal\");\n\n  // Once visible we want to register an onclick handler with the now visible confirm delete button.\n  var modalNotDeleteBtn = document.getElementById(\"notDelete-modal\");\n\n  var modalDeleteBtn = document.getElementById(\"delete-modal\");\n\n  modalDeleteBtn.onclick = function () {\n    //window.location.href = `/delete/${id}`;\n    // Instead of changing the window location to the delete post handler,\n    // we will use the new api to delete this item\n    fetch(`/api/deletelink/${id}`)\n      .then((res) => res.json())\n      .then((response) => {\n        if (response == \"Success\") {\n          universe.CloseModal(\"deleteModal\");\n\n          universe.SnackbarCommon(\n            \"snackbar\",\n            langHandler.UnicornComposite(\n              i18n_returnsSuccessDelete,\n              i18n_returnValueLinkItem\n            ),\n            universe.HotReload(\"linkItemList\", \"/\", homePageInit, \"reload\")\n          );\n        } else {\n          // an error occured during deletion\n          universe.SnackbarError(\n            \"snackbar\",\n            langHandler.UnicornComposite(\n              i18n_returnsFailureDelete,\n              \"Link Item\"\n            ),\n            false,\n            response\n          );\n        }\n      });\n  };\n\n  modalNotDeleteBtn.onclick = function () {\n    universe.CloseModal(\"deleteModal\");\n  };\n\n  window.onclick = function (event) {\n    if (event.target == modal) {\n      universe.CloseModal(\"deleteModal\");\n    }\n  };\n}\n\nfunction headerPlugins() {\n  var headerPluginLeft = document.getElementById(\"headerPluginLeft\");\n  var headerPluginRight = document.getElementById(\"headerPluginRight\");\n\n  const changeHeaderSettings = function (\n    side,\n    pluginName,\n    pluginOptions,\n    modal\n  ) {\n    fetch(\"/api/usersettings\")\n      .then((res) => res.json())\n      .then((data) => {\n        // now with the current user settings, we can modify what we need to\n        data.headerPlugins[side].name = pluginName;\n        data.headerPlugins[side].options = pluginOptions;\n\n        // then to post this data back to GoPage\n\n        var raw = JSON.stringify(data);\n\n        fetch(\"/api/usersettingswrite\", universe.CreateJSONPOSTHeaders(raw))\n          .then((response) => response.json())\n          .then((result) => {\n            if (result == \"Success\") {\n              universe.CloseModal(\"headerPluginModal\");\n\n              universe.SnackbarCommon(\n                \"snackbar\",\n                langHandler.UnicornComposite(\n                  i18n_returnsSuccessUpdate,\n                  i18n_returnValueHeaderPlugin\n                ),\n                universe.HotReload(\"linkItemList\", \"/\", homePageInit, \"reload\")\n              );\n            } else {\n              // error occured\n              console.log(result);\n              universe.SnackbarError(\n                \"snackbar\",\n                i18n_returnValueGenericError,\n                false,\n                result\n              );\n            }\n          });\n      });\n  };\n\n  const handlePluginHeader = function (side) {\n    universe.ShowModal(\"headerPluginModal\");\n\n    var backBtn = document.getElementById(\"headerPlugin-goBack\");\n    backBtn.onclick = function () {\n      universe.CloseModal(\"headerPluginModal\");\n    };\n\n    var submitBtn = document.getElementById(\"headerPlugin-submit\");\n\n    submitBtn.onclick = function () {\n      changeHeaderSettings(\n        side,\n        document.getElementById(\"header-plugin-name\").value,\n        document.getElementById(\"header-plugin-options\").value,\n        modal\n      );\n    };\n  };\n\n  headerPluginLeft.onclick = function () {\n    handlePluginHeader(\"left\");\n  };\n\n  headerPluginRight.onclick = function () {\n    handlePluginHeader(\"right\");\n  };\n}\n",
    "static": true,
    "longname": "D:/Personal Documents/GitHub Repositories/GoPage/assets/js/home.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1,
    "kind": "function",
    "name": "onload",
    "memberof": "js/home.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/home.js~onload",
    "access": null,
    "export": false,
    "importPath": "GoPage/js/home.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true
  },
  {
    "__docId__": 2,
    "kind": "function",
    "name": "homePageInit",
    "memberof": "js/home.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/home.js~homePageInit",
    "access": null,
    "export": false,
    "importPath": "GoPage/js/home.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true
  },
  {
    "__docId__": 3,
    "kind": "function",
    "name": "reloadPluginJS",
    "memberof": "js/home.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/home.js~reloadPluginJS",
    "access": null,
    "export": false,
    "importPath": "GoPage/js/home.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 46,
    "undocument": true
  },
  {
    "__docId__": 4,
    "kind": "function",
    "name": "filterSelection",
    "memberof": "js/home.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/home.js~filterSelection",
    "access": null,
    "export": false,
    "importPath": "GoPage/js/home.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 72,
    "undocument": true
  },
  {
    "__docId__": 5,
    "kind": "function",
    "name": "removeClass",
    "memberof": "js/home.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/home.js~removeClass",
    "access": null,
    "export": false,
    "importPath": "GoPage/js/home.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 87,
    "undocument": true
  },
  {
    "__docId__": 6,
    "kind": "function",
    "name": "addClass",
    "memberof": "js/home.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/home.js~addClass",
    "access": null,
    "export": false,
    "importPath": "GoPage/js/home.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 98,
    "undocument": true
  },
  {
    "__docId__": 7,
    "kind": "function",
    "name": "searchBarUpdate",
    "memberof": "js/home.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/home.js~searchBarUpdate",
    "access": null,
    "export": false,
    "importPath": "GoPage/js/home.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 108,
    "undocument": true
  },
  {
    "__docId__": 8,
    "kind": "class",
    "name": "LinkItemDOM",
    "memberof": "js/home.js",
    "static": true,
    "longname": "js/home.js~LinkItemDOM",
    "access": null,
    "export": false,
    "importPath": "GoPage/js/home.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 131,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 9,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "js/home.js~LinkItemDOM",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/home.js~LinkItemDOM#constructor",
    "access": null,
    "description": null,
    "lineNumber": 132,
    "undocument": true
  },
  {
    "__docId__": 10,
    "kind": "member",
    "name": "FormData",
    "memberof": "js/home.js~LinkItemDOM",
    "static": false,
    "longname": "js/home.js~LinkItemDOM#FormData",
    "access": null,
    "description": null,
    "lineNumber": 134,
    "undocument": true
  },
  {
    "__docId__": 11,
    "kind": "member",
    "name": "FormDom",
    "memberof": "js/home.js~LinkItemDOM",
    "static": false,
    "longname": "js/home.js~LinkItemDOM#FormDom",
    "access": null,
    "description": null,
    "lineNumber": 136,
    "undocument": true
  },
  {
    "__docId__": 12,
    "kind": "get",
    "name": "jsonObjTemplate",
    "memberof": "js/home.js~LinkItemDOM",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/home.js~LinkItemDOM#jsonObjTemplate",
    "access": null,
    "description": null,
    "lineNumber": 139,
    "undocument": true
  },
  {
    "__docId__": 13,
    "kind": "get",
    "name": "jsonObjFilled",
    "memberof": "js/home.js~LinkItemDOM",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/home.js~LinkItemDOM#jsonObjFilled",
    "access": null,
    "description": null,
    "lineNumber": 153,
    "undocument": true
  },
  {
    "__docId__": 14,
    "kind": "set",
    "name": "jsonObjFill",
    "memberof": "js/home.js~LinkItemDOM",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/home.js~LinkItemDOM#jsonObjFill",
    "access": null,
    "description": null,
    "lineNumber": 167,
    "undocument": true
  },
  {
    "__docId__": 22,
    "kind": "method",
    "name": "jsonObjClear",
    "memberof": "js/home.js~LinkItemDOM",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/home.js~LinkItemDOM#jsonObjClear",
    "access": null,
    "description": null,
    "lineNumber": 177,
    "undocument": true
  },
  {
    "__docId__": 29,
    "kind": "get",
    "name": "staticIDField",
    "memberof": "js/home.js~LinkItemDOM",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/home.js~LinkItemDOM#staticIDField",
    "access": null,
    "description": null,
    "lineNumber": 187,
    "undocument": true
  },
  {
    "__docId__": 30,
    "kind": "set",
    "name": "staticIDField",
    "memberof": "js/home.js~LinkItemDOM",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/home.js~LinkItemDOM#staticIDField",
    "access": null,
    "description": null,
    "lineNumber": 191,
    "undocument": true
  },
  {
    "__docId__": 31,
    "kind": "get",
    "name": "friendlyNameField",
    "memberof": "js/home.js~LinkItemDOM",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/home.js~LinkItemDOM#friendlyNameField",
    "access": null,
    "description": null,
    "lineNumber": 195,
    "undocument": true
  },
  {
    "__docId__": 32,
    "kind": "set",
    "name": "friendlyNameField",
    "memberof": "js/home.js~LinkItemDOM",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/home.js~LinkItemDOM#friendlyNameField",
    "access": null,
    "description": null,
    "lineNumber": 199,
    "undocument": true
  },
  {
    "__docId__": 33,
    "kind": "get",
    "name": "linkField",
    "memberof": "js/home.js~LinkItemDOM",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/home.js~LinkItemDOM#linkField",
    "access": null,
    "description": null,
    "lineNumber": 203,
    "undocument": true
  },
  {
    "__docId__": 34,
    "kind": "set",
    "name": "linkField",
    "memberof": "js/home.js~LinkItemDOM",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/home.js~LinkItemDOM#linkField",
    "access": null,
    "description": null,
    "lineNumber": 207,
    "undocument": true
  },
  {
    "__docId__": 35,
    "kind": "get",
    "name": "categoryField",
    "memberof": "js/home.js~LinkItemDOM",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/home.js~LinkItemDOM#categoryField",
    "access": null,
    "description": null,
    "lineNumber": 211,
    "undocument": true
  },
  {
    "__docId__": 36,
    "kind": "set",
    "name": "categoryField",
    "memberof": "js/home.js~LinkItemDOM",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/home.js~LinkItemDOM#categoryField",
    "access": null,
    "description": null,
    "lineNumber": 215,
    "undocument": true
  },
  {
    "__docId__": 37,
    "kind": "get",
    "name": "colourField",
    "memberof": "js/home.js~LinkItemDOM",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/home.js~LinkItemDOM#colourField",
    "access": null,
    "description": null,
    "lineNumber": 219,
    "undocument": true
  },
  {
    "__docId__": 38,
    "kind": "set",
    "name": "colourField",
    "memberof": "js/home.js~LinkItemDOM",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/home.js~LinkItemDOM#colourField",
    "access": null,
    "description": null,
    "lineNumber": 223,
    "undocument": true
  },
  {
    "__docId__": 39,
    "kind": "get",
    "name": "styleField",
    "memberof": "js/home.js~LinkItemDOM",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/home.js~LinkItemDOM#styleField",
    "access": null,
    "description": null,
    "lineNumber": 227,
    "undocument": true
  },
  {
    "__docId__": 40,
    "kind": "set",
    "name": "styleField",
    "memberof": "js/home.js~LinkItemDOM",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/home.js~LinkItemDOM#styleField",
    "access": null,
    "description": null,
    "lineNumber": 231,
    "undocument": true
  },
  {
    "__docId__": 41,
    "kind": "get",
    "name": "pluginField",
    "memberof": "js/home.js~LinkItemDOM",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/home.js~LinkItemDOM#pluginField",
    "access": null,
    "description": null,
    "lineNumber": 235,
    "undocument": true
  },
  {
    "__docId__": 42,
    "kind": "set",
    "name": "pluginField",
    "memberof": "js/home.js~LinkItemDOM",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/home.js~LinkItemDOM#pluginField",
    "access": null,
    "description": null,
    "lineNumber": 276,
    "undocument": true
  },
  {
    "__docId__": 43,
    "kind": "method",
    "name": "emptyPlugins",
    "memberof": "js/home.js~LinkItemDOM",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/home.js~LinkItemDOM#emptyPlugins",
    "access": null,
    "description": null,
    "lineNumber": 295,
    "undocument": true
  },
  {
    "__docId__": 44,
    "kind": "method",
    "name": "notEmpty",
    "memberof": "js/home.js~LinkItemDOM",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/home.js~LinkItemDOM#notEmpty",
    "access": null,
    "description": null,
    "lineNumber": 325,
    "undocument": true
  },
  {
    "__docId__": 45,
    "kind": "method",
    "name": "extraValues",
    "memberof": "js/home.js~LinkItemDOM",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "js/home.js~LinkItemDOM#extraValues",
    "access": null,
    "description": null,
    "lineNumber": 338,
    "undocument": true
  },
  {
    "__docId__": 46,
    "kind": "function",
    "name": "addPluginToFormV2",
    "memberof": "js/home.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/home.js~addPluginToFormV2",
    "access": null,
    "export": false,
    "importPath": "GoPage/js/home.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 352,
    "undocument": true
  },
  {
    "__docId__": 47,
    "kind": "function",
    "name": "getLinkItemForm",
    "memberof": "js/home.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/home.js~getLinkItemForm",
    "access": null,
    "export": false,
    "importPath": "GoPage/js/home.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 375,
    "undocument": true
  },
  {
    "__docId__": 48,
    "kind": "function",
    "name": "clearLinkItemForm",
    "memberof": "js/home.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/home.js~clearLinkItemForm",
    "access": null,
    "export": false,
    "importPath": "GoPage/js/home.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 406,
    "undocument": true
  },
  {
    "__docId__": 49,
    "kind": "function",
    "name": "stringValidityNotEmpty",
    "memberof": "js/home.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/home.js~stringValidityNotEmpty",
    "access": null,
    "export": false,
    "importPath": "GoPage/js/home.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 416,
    "undocument": true
  },
  {
    "__docId__": 50,
    "kind": "function",
    "name": "disablePluginLocation",
    "memberof": "js/home.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/home.js~disablePluginLocation",
    "access": null,
    "export": false,
    "importPath": "GoPage/js/home.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 434,
    "undocument": true
  },
  {
    "__docId__": 51,
    "kind": "function",
    "name": "addPluginOptions",
    "memberof": "js/home.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/home.js~addPluginOptions",
    "access": null,
    "export": false,
    "importPath": "GoPage/js/home.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 441,
    "undocument": true
  },
  {
    "__docId__": 52,
    "kind": "function",
    "name": "initInstalledPluginListToForm",
    "memberof": "js/home.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/home.js~initInstalledPluginListToForm",
    "access": null,
    "export": false,
    "importPath": "GoPage/js/home.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 464,
    "undocument": true
  },
  {
    "__docId__": 53,
    "kind": "function",
    "name": "newItemModal",
    "memberof": "js/home.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/home.js~newItemModal",
    "access": null,
    "export": false,
    "importPath": "GoPage/js/home.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 484,
    "undocument": true
  },
  {
    "__docId__": 54,
    "kind": "function",
    "name": "editItemModal",
    "memberof": "js/home.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/home.js~editItemModal",
    "access": null,
    "export": false,
    "importPath": "GoPage/js/home.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 526,
    "undocument": true
  },
  {
    "__docId__": 55,
    "kind": "function",
    "name": "saveLinkItemModal",
    "memberof": "js/home.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/home.js~saveLinkItemModal",
    "access": null,
    "export": false,
    "importPath": "GoPage/js/home.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 597,
    "undocument": true
  },
  {
    "__docId__": 56,
    "kind": "function",
    "name": "firstTimeSetup",
    "memberof": "js/home.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/home.js~firstTimeSetup",
    "access": null,
    "export": false,
    "importPath": "GoPage/js/home.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 629,
    "undocument": true
  },
  {
    "__docId__": 57,
    "kind": "function",
    "name": "dataListInputHeader",
    "memberof": "js/home.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/home.js~dataListInputHeader",
    "access": null,
    "export": false,
    "importPath": "GoPage/js/home.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 677,
    "undocument": true
  },
  {
    "__docId__": 58,
    "kind": "function",
    "name": "dataListInputCaller",
    "memberof": "js/home.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/home.js~dataListInputCaller",
    "access": null,
    "export": false,
    "importPath": "GoPage/js/home.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 698,
    "undocument": true
  },
  {
    "__docId__": 59,
    "kind": "function",
    "name": "dataListInputChangeView",
    "memberof": "js/home.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/home.js~dataListInputChangeView",
    "access": null,
    "export": false,
    "importPath": "GoPage/js/home.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 710,
    "undocument": true
  },
  {
    "__docId__": 60,
    "kind": "function",
    "name": "dataListInputChangeExplain",
    "memberof": "js/home.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/home.js~dataListInputChangeExplain",
    "access": null,
    "export": false,
    "importPath": "GoPage/js/home.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 715,
    "undocument": true
  },
  {
    "__docId__": 61,
    "kind": "function",
    "name": "dataListInputChangeAutofill",
    "memberof": "js/home.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/home.js~dataListInputChangeAutofill",
    "access": null,
    "export": false,
    "importPath": "GoPage/js/home.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 720,
    "undocument": true
  },
  {
    "__docId__": 62,
    "kind": "function",
    "name": "modalDelete",
    "memberof": "js/home.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/home.js~modalDelete",
    "access": null,
    "export": false,
    "importPath": "GoPage/js/home.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 731,
    "undocument": true
  },
  {
    "__docId__": 63,
    "kind": "function",
    "name": "headerPlugins",
    "memberof": "js/home.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/home.js~headerPlugins",
    "access": null,
    "export": false,
    "importPath": "GoPage/js/home.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 784,
    "undocument": true
  },
  {
    "__docId__": 64,
    "kind": "file",
    "name": "js/langHandler.js",
    "content": "// UPDATE: Its worth noting that nearly nothing from this is in use after the migration to template based translations.\n// The only function still in use is UnicornComposite. Otherwise its no longer used.\n\n// This will be the namespace to handle returning of strings of language data to\n// build the pages and support multiple languages.\n\nvar currentLang = \"en\";\ncurrentLang = document.documentElement.lang;\n// Since langhandler.DetermineLang is no longer called, this should pick up the targetlanguage on page load\n\n// Since a global variable is the langHandler that is defined here, we turn off checking of redeclared variables to avoid errors here\n/*eslint-disable-next-line no-redeclare*/\nvar langHandler = {\n  ProvideString: function ProvideString(id, element) {\n    // this will take an identifier\n    // query the current language from the server\n    // then check for that languages existance of that string, if it doesn't exist,\n    // will then default to english\n\n    var resourceName = `strings.${currentLang}.json`;\n\n    fetch(`/assets/lang/${resourceName}`).then((response) => {\n      response.json().then((res) => {\n        // stringing in this way, allows us to work with the JSON formatted response without having to build in another wait for the promise to resolve\n        // like the previous implementation\n        if (response.ok) {\n          if (res[id]) {\n            element.textContent = res[id];\n          } else {\n            //console.log(`Translation for this item does not exist: ${id}`);\n            fetch(\"/assets/lang/strings.en.json\")\n              .then((defaultRes) => defaultRes.json())\n              .then((defaultData) => {\n                if (defaultData[id]) {\n                  element.textContent = defaultData[id];\n                } else {\n                  //console.log(`Default Translation for this item does not exist: ${id}`);\n                  element.textContent = \"Translations Missing!\";\n                }\n              });\n          }\n        } else {\n          //console.log(`Language file seemed to fail with: ${response.status}`);\n          //console.log(`Providing default language strings...`);\n          fetch(\"/assets/lang/strings.en.json\")\n            .then((defaultRes) => defaultRes.json())\n            .then((defaultData) => {\n              if (defaultData[id]) {\n                element.textContent = defaultData[id];\n              } else {\n                //console.log(`Default Translation for this item does not exist: ${id}`);\n                element.textContent = \"Translations missing!\";\n              }\n            });\n        }\n      });\n    });\n  },\n  InsertLangMetered: function InsertLangMetered() {\n    // This will be equivilant to ProvideString, with slight improvements, and initiating as few web requests as possible\n    var resourceName = `strings.${currentLang}.json`;\n    var canUseChosenLang = false;\n\n    fetch(\"/assets/lang/strings.json\")\n      .then((response) => response.json())\n      .then((strings) => {\n        // to avoid doing a lookup during each string identification we will call all network requests first\n\n        fetch(`/assets/lang/${resourceName}`).then((chosenLangResponse) => {\n          chosenLangResponse.json().then((chosenLangStrings) => {\n            if (chosenLangResponse.ok) {\n              canUseChosenLang = true;\n            }\n\n            fetch(\"/assets/lang/strings.en.json\")\n              .then((defaultLangRes) => defaultLangRes.json())\n              .then((defaultLangStrings) => {\n                for (var i = 0; i < strings.length; i++) {\n                  var curEle = document.getElementById(strings[i]);\n                  if (curEle != null) {\n                    if (canUseChosenLang && chosenLangStrings[strings[i]]) {\n                      curEle.textContent = chosenLangStrings[strings[i]];\n                    } else if (defaultLangStrings[strings[i]]) {\n                      curEle.textContent = defaultLangStrings[strings[i]];\n                    } else {\n                      curEle.textContent = \"Translations Missing!\";\n                    }\n                  } // else the string isn't on this page\n                }\n              });\n          });\n        });\n      });\n  },\n  ProvideStringRaw: function ProvideStringRaw(id) {\n    // This will be used for providing strings of generated content, where its not possible to then change the string wtihin the DOM\n    return new Promise(function (resolve, reject) {\n      var resourceName = `strings.${currentLang}.json`;\n\n      fetch(`/assets/lang/${resourceName}`).then((response) => {\n        response.json().then((res) => {\n          if (response.ok) {\n            if (res[id]) {\n              resolve(res[id]);\n            } else {\n              //console.log(`Translation for this item does not exist: ${id}`);\n              fetch(\"/assets/lang/strings.en.json\")\n                .then((defaultRes) => defaultRes.json())\n                .then((defaultData) => {\n                  if (defaultData[id]) {\n                    resolve(defaultData[id]);\n                  } else {\n                    //console.log(`Default Translation for this item does not exist: ${id}`);\n                    reject(\"Translations Missing!\");\n                  }\n                });\n            }\n          } else {\n            // requested language file isn't available\n            //console.log(`Language file seemed to fail with: ${response.status}`);\n            //console.log('Providing default langauge stirngs...');\n            fetch(\"/assets/lang/strings.en.json\")\n              .then((defaultRes) => defaultRes.json())\n              .then((defaultData) => {\n                if (defaultData[id]) {\n                  resolve(defaultData[id]);\n                } else {\n                  //console.log(`Default Translation for this item does not exist: ${id}`);\n                  reject(\"Translations Missing!\");\n                }\n              });\n          }\n        });\n      });\n    });\n  },\n  DetermineLang: function DetermineLang() {\n    return new Promise(function (resolve, reject) {\n      // this will try to reduce the amount of calls to the server to only need to do it\n      // once per page load\n      try {\n        fetch(\"/api/serversettings\")\n          .then((response) => response.json())\n          .then((data) => {\n            if (currentLang != data.lang) {\n              currentLang = data.lang;\n              // to allow screen readers to pronounce inner content correctly, we will also modify the HTML declared language when detecting the language is different\n              // than declared by default\n              document.documentElement.setAttribute(\"lang\", currentLang);\n\n              //console.log(`Set the Current Language global variable to ${currentLang}`);\n              resolve(\"Set Current Langage\");\n            } else {\n              //console.log(`Current Language unchanged from ${currentLang}`);\n              resolve(\"Language Unchanged\");\n            }\n          });\n      } catch (err) {\n        reject(err);\n      }\n    });\n  },\n  InsertLang: function InsertLang() {\n    // this will be in charge of looking up each element to find its translation\n    fetch(\"/assets/lang/strings.json\")\n      .then((response) => response.json())\n      .then((strings) => {\n        for (var i = 0; i < strings.length; i++) {\n          var curEle = document.getElementById(strings[i]);\n          if (curEle != null) {\n            langHandler.ProvideString(strings[i], curEle);\n          }\n        }\n      });\n  },\n  UnicornComposite: function UnicornComposite() {\n    // this is my implementation of Composite Formatting from C#\n    // This is at its core based on the Stack Overflow Implmentation found and reworked by Gabriel Nahmias\n    // Which was again then reworked by myself to work as a standalone method\n    // https://stackoverflow.com/a/18234317/12707685\n    // ---------------------------------------------\n    // This will accept a composite formatted string for ease of translations,\n    // First Argument MUST be the string to work on,\n    // all other arguments afterwards can be keys, with not enough or to many causing zero errors\n    // EX.\n    // UnicornComposite(\"How is this for a {0}, I hope it {1}\", \"Test\", \"Works\"); - How is this for a Test, I hope it Works.\n\n    var str = arguments[0];\n    // the first argument should be the string to work on; everything after is repalce keys\n    if (arguments.length > 1) {\n      var t = typeof arguments[1];\n      var key;\n      var args =\n        \"string\" === t || \"number\" === t\n          ? Array.prototype.slice.call(arguments)\n          : arguments[1];\n      // since the conditional ternary operator to define args will liekly include the inital string\n      // if array we want to remove it if array\n      if (Array.isArray(args)) {\n        args.shift();\n      }\n\n      for (key in args) {\n        str = str.replace(new RegExp(\"\\\\{\" + key + \"\\\\}\", \"gi\"), args[key]);\n      }\n    }\n    return str;\n  },\n};\n",
    "static": true,
    "longname": "D:/Personal Documents/GitHub Repositories/GoPage/assets/js/langHandler.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 65,
    "kind": "variable",
    "name": "currentLang",
    "memberof": "js/langHandler.js",
    "static": true,
    "longname": "js/langHandler.js~currentLang",
    "access": null,
    "export": false,
    "importPath": "GoPage/js/langHandler.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true
  },
  {
    "__docId__": 66,
    "kind": "variable",
    "name": "langHandler",
    "memberof": "js/langHandler.js",
    "static": true,
    "longname": "js/langHandler.js~langHandler",
    "access": null,
    "export": false,
    "importPath": "GoPage/js/langHandler.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true
  },
  {
    "__docId__": 67,
    "kind": "file",
    "name": "js/linkhealth.js",
    "content": "/**\n* @member {File} LinkHealthJS\n* @desc The JavaScript file loaded with the Link Health Page.\n*/\nwindow.onload = function () {\n  onPageLoad();\n};\n\n/**\n* @desc Builds the main content of the LinkHealth page. By checking all saved links for any errors and outputting them in proper HTML.\n* @todo Inline with the Neuter JavaScript Initiative, this should be done in Golang, and injected into the template.\n* @memberof LinkHealthJS\n*/\nfunction onPageLoad() {\n  // This will be called when the page first loads and we can begin our check.\n  // The divs should be filled in with a loading bar initially\n\n  fetch(\"/api/items\")\n    .then((response) => response.json())\n    .then((data) => {\n      // With all the saved Items we can create two lists. One containing all\n      // hostsnames, and another of exact links.\n\n      var matchList = [];\n      // matchList = [ { type: exact|hostname, matched: url, friendly: [ array of friendly items matched.] } ]\n      data.forEach((element) => {\n        data.forEach((elementCheck) => {\n          // Since we know each data item will have an id associated, we can ensure it doesn't match against itself\n          // be checking the id\n          if (element.id != elementCheck.id) {\n            if (element.link == elementCheck.link) {\n              //console.log(`${element.link} Matches Exactly for ${elementCheck.link}`);\n              var tmpObjExact = {\n                type: \"exact\",\n                matched: element.link,\n                friendly: [element.friendlyName, elementCheck.friendlyName],\n              };\n              matchList.push(tmpObjExact);\n            }\n            if (getHostname(element.link) == getHostname(elementCheck.link)) {\n              //console.log(`${element.link} Matches hostname of ${elementCheck.link}`);\n              var tmpObjHost = {\n                type: \"hostname\",\n                matched: element.link,\n                friendly: [element.friendlyName, elementCheck.friendlyName],\n              };\n              matchList.push(tmpObjHost);\n            }\n          } // else these are the same exact item\n        });\n      });\n\n      // now time to add this data to the page\n      var htmlToInsert = \"\";\n\n      var matchTypeString = \"\";\n      var matchItemString = \"\";\n      var matchLinkItemString = \"\";\n\n      langHandler\n        .ProvideStringRaw(\"i18n-generatedLHMatchType\")\n        .then((matchTypeRes) => {\n          matchTypeString = matchTypeRes;\n\n          langHandler\n            .ProvideStringRaw(\"i18n-generatedLHMatchedItem\")\n            .then((matchItemRes) => {\n              matchItemString = matchItemRes;\n\n              langHandler\n                .ProvideStringRaw(\"i18n-generatedLHLinkItem\")\n                .then((linkItemRes) => {\n                  matchLinkItemString = linkItemRes;\n\n                  matchList.forEach((element) => {\n                    var htmlStart = `<div class=\"bar-list-bars\"> <div>`;\n                    var htmlEnd = \"</div> </div>\";\n                    htmlToInsert += htmlStart;\n                    htmlToInsert += `<p><span class=\"text-style-declare\">${matchTypeString}:</span> ${element.type}: <span class=\"text-style-declare\">${matchItemString}:</span> ${element.matched}: <span class=\"text-style-declare\">${matchLinkItemString}:</span> ${element.friendly[0]} & ${element.friendly[1]}</p>`;\n                    htmlToInsert += htmlEnd;\n                  });\n\n                  if (matchList.length === 0) {\n                    htmlToInsert += `<div class=\"bar-list-bars\"> <div><p>No offending Links Found</p></div></div>`;\n                  }\n\n                  // once this is all created, we can attach it into the dom.\n                  document.getElementById(\"link-health\").innerHTML =\n                    htmlToInsert;\n                });\n            });\n        });\n    });\n}\n\n/**\n* @desc Returns just the Hostname of a provided link\n* @param {string} url is the URL to get a Hostname of.\n* @return {string} Hostname only of the provided link.\n* @memberof LinkHealthJS\n* @example\n* let hostname = getHostname(link);\n*/\nfunction getHostname(url) {\n  // use URL constructor and return hostname\n  return new URL(url).hostname;\n}\n",
    "static": true,
    "longname": "D:/Personal Documents/GitHub Repositories/GoPage/assets/js/linkhealth.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 68,
    "kind": "function",
    "name": "onload",
    "memberof": "js/linkhealth.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/linkhealth.js~onload",
    "access": null,
    "export": false,
    "importPath": "GoPage/js/linkhealth.js",
    "importStyle": null,
    "description": "The JavaScript file loaded with the Link Health Page.",
    "lineNumber": 5
  },
  {
    "__docId__": 69,
    "kind": "function",
    "name": "onPageLoad",
    "memberof": "js/linkhealth.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/linkhealth.js~onPageLoad",
    "access": null,
    "export": false,
    "importPath": "GoPage/js/linkhealth.js",
    "importStyle": null,
    "description": "Builds the main content of the LinkHealth page. By checking all saved links for any errors and outputting them in proper HTML.",
    "lineNumber": 14,
    "todo": [
      "Inline with the Neuter JavaScript Initiative, this should be done in Golang, and injected into the template."
    ]
  },
  {
    "__docId__": 70,
    "kind": "function",
    "name": "getHostname",
    "memberof": "js/linkhealth.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/linkhealth.js~getHostname",
    "access": null,
    "export": false,
    "importPath": "GoPage/js/linkhealth.js",
    "importStyle": null,
    "description": "Returns just the Hostname of a provided link",
    "examples": [
      "let hostname = getHostname(link);"
    ],
    "lineNumber": 104,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "is the URL to get a Hostname of."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Hostname only of the provided link."
    }
  },
  {
    "__docId__": 71,
    "kind": "file",
    "name": "js/pluginhandler.js",
    "content": "// Since a global variable is the pluginAPI that is defined here, we turn off checking of redeclared variables to avoid errors here\n/*eslint-disable-next-line no-redeclare, no-unused-vars*/\nvar pluginAPI = {\n  ReturnItems: function ReturnItems(pluginName) {\n    return document.getElementsByClassName(pluginName);\n  },\n\n  ParseConfig: function ParseConfig(rawConfig) {\n    // Will parse the generic or otherwise Rev1 config or option data for plugins\n    // option=value;\n\n    // First we will break up the config into its different key value pairs\n    var keyValue = rawConfig.split(\";\");\n    // Then to add these keys with their declaration to the object\n    var obj = {};\n    for (let i = 0; i < keyValue.length; i++) {\n      var keyOrValue = keyValue[i].split(\"=\");\n      if (keyOrValue[0] != \"\") {\n        obj[keyOrValue[0]] = keyOrValue[1];\n      }\n    }\n    return obj;\n  },\n};\n",
    "static": true,
    "longname": "D:/Personal Documents/GitHub Repositories/GoPage/assets/js/pluginhandler.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 72,
    "kind": "variable",
    "name": "pluginAPI",
    "memberof": "js/pluginhandler.js",
    "static": true,
    "longname": "js/pluginhandler.js~pluginAPI",
    "access": null,
    "export": false,
    "importPath": "GoPage/js/pluginhandler.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true
  },
  {
    "__docId__": 73,
    "kind": "file",
    "name": "js/pluginLoad.js",
    "content": "function checkPlugins() {\n  fetch(\"/plugins/installedPlugins.json\")\n    .then((response) => response.json())\n    .then((data) => {\n      data.forEach((element) => {\n        // now with each element, we can try to read its package.json file,\n        // relying on the idea that the folder has the same name as the plugin name\n        if (element.installed) {\n          fetch(`/plugins${element.mainDir}package.json`)\n            .then((packRes) => packRes.json())\n            .then((packData) => {\n              // Adding check for page this is loaded on to reduce duplication of a seperate nonHomeLoad for plugins\n              if (\n                packData.type == \"item\" &&\n                document.title == \"GoPage - Home\"\n              ) {\n                var script = document.createElement(\"script\");\n                script.src = `/plugins${packData.mainDir}${packData.main}`;\n                // Importing the JS as a module here, ensures that any functions or global variables are not in the global scope\n                script.type = \"module\";\n                script.dataset.pluginType = \"item\";\n                document.body.appendChild(script);\n              } else if (packData.type == \"theme\") {\n                var currentTheme = document.getElementById(\"theme\");\n                var pluginTheme = `/plugins${packData.mainDir}${packData.main}`;\n                currentTheme.setAttribute(\"href\", pluginTheme);\n              } else if (packData.type == \"header\") {\n                // if this is a header type, find out where, if at all its assigned, and attach its values.\n                fetch(\"/api/usersettings\")\n                  .then((res) => res.json())\n                  .then((headerData) => {\n                    if (headerData.headerPlugins.right.name == packData.name) {\n                      headerPluginAssignment(\n                        \"headerPluginRight\",\n                        packData.name,\n                        headerData.headerPlugins.right.options\n                      );\n                      loadJS(packData.mainDir, packData.main);\n                    }\n                    if (headerData.headerPlugins.left.name == packData.name) {\n                      headerPluginAssignment(\n                        \"headerPluginLeft\",\n                        packData.name,\n                        headerData.headerPlugins.left.options\n                      );\n                      loadJS(packData.mainDir, packData.main);\n                    } // else the plugin is installed but unassigned and should not be called.\n                  });\n              }\n            });\n        }\n      });\n    });\n}\n\ncheckPlugins();\n\nfunction headerPluginAssignment(elementID, pluginName, pluginOptions) {\n  document\n    .getElementById(elementID)\n    .setAttribute(\"data-pluginName\", pluginName);\n  document.getElementById(elementID).className += ` ${pluginName}`;\n  if (pluginOptions) {\n    document\n      .getElementById(elementID)\n      .setAttribute(\"data-options\", pluginOptions);\n  }\n}\n\nfunction loadJS(dir, file) {\n  var script = document.createElement(\"script\");\n  script.src = `/plugins${dir}${file}`;\n  script.type = \"module\";\n  document.body.appendChild(script);\n}\n",
    "static": true,
    "longname": "D:/Personal Documents/GitHub Repositories/GoPage/assets/js/pluginLoad.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 74,
    "kind": "function",
    "name": "checkPlugins",
    "memberof": "js/pluginLoad.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/pluginLoad.js~checkPlugins",
    "access": null,
    "export": false,
    "importPath": "GoPage/js/pluginLoad.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true
  },
  {
    "__docId__": 75,
    "kind": "function",
    "name": "headerPluginAssignment",
    "memberof": "js/pluginLoad.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/pluginLoad.js~headerPluginAssignment",
    "access": null,
    "export": false,
    "importPath": "GoPage/js/pluginLoad.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 58,
    "undocument": true
  },
  {
    "__docId__": 76,
    "kind": "function",
    "name": "loadJS",
    "memberof": "js/pluginLoad.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/pluginLoad.js~loadJS",
    "access": null,
    "export": false,
    "importPath": "GoPage/js/pluginLoad.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 70,
    "undocument": true
  },
  {
    "__docId__": 77,
    "kind": "file",
    "name": "js/pluginRepo.js",
    "content": "// Here we can respond to the install, and uninstall requests of plugins\n\n/*eslint-disable-next-line no-unused-vars */\nfunction installPlugin(pluginUrl, pluginName) {\n  universe.Loader(true);\n\n  pluginFetchWrapperNonBlocking(\n    `/plugins/install?source=${pluginUrl}`,\n    \"install\",\n    pluginName\n  );\n}\n\n/*eslint-disable-next-line no-unused-vars */\nfunction uninstallPlugin(pluginName) {\n  universe.Loader(true);\n\n  pluginFetchWrapperNonBlocking(\n    `/plugins/uninstall?pluginName=${pluginName}`,\n    \"delete\",\n    pluginName\n  );\n}\n\n/*eslint-disable-next-line no-unused-vars */\nfunction updatePlugin() {\n  universe.Loader(true);\n\n  pluginFetchWrapperNonBlocking(\n    \"/plugins/update\",\n    \"update\",\n    i18n_returnValueAvailablePlugins\n  );\n}\n\nfunction pluginFetchWrapperNonBlocking(target, action, targetItem) {\n  // valid actions: delete, install, update\n  // target is the name of the item being actioned against\n\n  fetch(target)\n    .then((res) => {\n      // since this may return error data not properly formatted as json, we need to have a backup\n      try {\n        JSON.parse(res);\n        return res.json();\n      } catch (err) {\n        return res.text();\n      }\n    })\n    .then((data) => {\n      if (data.includes(\"Success!\")) {\n        returnData(targetItem, action, \"pass\", formatModalContent(data));\n      } else {\n        // error of some sort occured.\n        // We can add additional error checking here to make it more human readable.\n        if (data.includes(\"Err\") && data.includes(\"32\")) {\n          // we know this would indicate a golang error 32\n          var tmpData =\n            \"Golang Error 32: The process cannot access the file because it is being used by another process.\";\n          console.log(tmpData);\n          console.log(data);\n          returnData(targetItem, action, \"fail\", tmpData);\n        } else {\n          // currently unhandled error occured.\n          console.log(data);\n          returnData(targetItem, action, \"fail\", formatModalContent(data));\n        }\n      }\n    })\n    .catch((err) => {\n      console.log(err);\n      returnData(targetItem, action, \"fail\", formatModalContent(err));\n    });\n}\n\nfunction formatModalContent(text) {\n  var splitText = text.split(\"...\");\n  var newText = \"\";\n  for (let i = 0; i < splitText.length; i++) {\n    if (splitText[i].includes(\"\\\\n\")) {\n      // Using \\\\ here to escape the newline character\n      var tmpString = splitText[i].replace(\"\\\\n\", \"\");\n      newText += tmpString + \"<br>\";\n    } else {\n      newText += splitText[i] + \"<br>\";\n    }\n  }\n  return newText;\n}\n\nfunction returnData(itemName, action, status, details) {\n  // This is made to work with the template modal & snackbar, using non-blocking design\n  // itemName = The name of the Plugin or Item that has been affected (e.g. Available Plugins, Pihole API)\n  // action = The explicit action taken (e.g. Deleted, Installed, Updated)\n  // action !! valid values: delete, install, update\n  // status = The status of the action (e.g. Successfully, Unsuccessfully)\n  // status !! valid values: fail, pass\n  // details = The long form details, this could be designed error codes, or raw returned data.\n\n  // but first first, lets disbale any active loader\n  universe.Loader(false);\n\n  // first we will validate the multiple options\n  if (status != \"pass\" && status != \"fail\") {\n    console.error(`Invalid status passed to return data: ${status}`);\n  } else {\n    if (action != \"delete\" && action != \"install\" && action != \"update\") {\n      console.error(`Invalid action passed to return data: ${action}`);\n    } else {\n      if (status == \"pass\") {\n        // This will invoke the SnackbarCommon component of the universe Namespace, with the following values in order\n        // \"snackbar\" the template imported snackbar with generic naming\n        // The textToShow within the snackbar: Consisting of:\n        //    UnicornComposite of the Proper String returned by findProperString, which grabs the translated string from global variables\n        //    and the item name we are working with.\n        // then SnackbarCommon: false - callback; false - extraClass; false - false - img; false - alt;\n        // additionalDetails: Being the details passed here.\n        universe.SnackbarCommon(\n          \"snackbar\",\n          langHandler.UnicornComposite(\n            universe.FindReturnsString(action, status),\n            itemName\n          ),\n          universe.HotReload(\"pluginList\", \"/pluginrepo\"),\n          false,\n          false,\n          false,\n          details\n        );\n      } else if (status == \"fail\") {\n        universe.SnackbarError(\n          \"snackbar\",\n          langHandler.UnicornComposite(\n            universe.FindReturnsString(action, status),\n            itemName\n          ),\n          false,\n          details\n        );\n      } else {\n        console.error(\n          \"Something went wrong processing the ReturnData() Request\"\n        );\n      }\n    }\n  }\n}\n",
    "static": true,
    "longname": "D:/Personal Documents/GitHub Repositories/GoPage/assets/js/pluginRepo.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 78,
    "kind": "function",
    "name": "installPlugin",
    "memberof": "js/pluginRepo.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/pluginRepo.js~installPlugin",
    "access": null,
    "export": false,
    "importPath": "GoPage/js/pluginRepo.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true
  },
  {
    "__docId__": 79,
    "kind": "function",
    "name": "uninstallPlugin",
    "memberof": "js/pluginRepo.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/pluginRepo.js~uninstallPlugin",
    "access": null,
    "export": false,
    "importPath": "GoPage/js/pluginRepo.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true
  },
  {
    "__docId__": 80,
    "kind": "function",
    "name": "updatePlugin",
    "memberof": "js/pluginRepo.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/pluginRepo.js~updatePlugin",
    "access": null,
    "export": false,
    "importPath": "GoPage/js/pluginRepo.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true
  },
  {
    "__docId__": 81,
    "kind": "function",
    "name": "pluginFetchWrapperNonBlocking",
    "memberof": "js/pluginRepo.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/pluginRepo.js~pluginFetchWrapperNonBlocking",
    "access": null,
    "export": false,
    "importPath": "GoPage/js/pluginRepo.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 36,
    "undocument": true
  },
  {
    "__docId__": 82,
    "kind": "function",
    "name": "formatModalContent",
    "memberof": "js/pluginRepo.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/pluginRepo.js~formatModalContent",
    "access": null,
    "export": false,
    "importPath": "GoPage/js/pluginRepo.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 76,
    "undocument": true
  },
  {
    "__docId__": 83,
    "kind": "function",
    "name": "returnData",
    "memberof": "js/pluginRepo.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/pluginRepo.js~returnData",
    "access": null,
    "export": false,
    "importPath": "GoPage/js/pluginRepo.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 91,
    "undocument": true
  },
  {
    "__docId__": 84,
    "kind": "file",
    "name": "js/settings.js",
    "content": "window.onload = function () {\n  onclickHandlers();\n};\n\nfunction onclickHandlers() {\n  var submitLangBtn = document.getElementById(\"submitLangBtn\");\n  var removeLeftHeaderPluginBtn = document.getElementById(\n    \"removeLeftHeaderPluginBtn\"\n  );\n  var removeRightHheaderPluginBtn = document.getElementById(\n    \"removeRightHheaderPluginBtn\"\n  );\n  var submitLoggingBtn = document.getElementById(\"submitLoggingBtn\");\n  var submitRobotsBtn = document.getElementById(\"submitRobotsBtn\");\n\n  submitLangBtn.onclick = function () {\n    var chosenLang = document.getElementById(\"changeLangInput\").value;\n    fetch(`/api/changelang?lang=${chosenLang}`)\n      .then((res) => res.json())\n      .then((response) => {\n        universe.SnackbarCommon(\n          \"snackbar\",\n          langHandler.UnicornComposite(\n            i18n_returnsSuccessUpdate,\n            i18n_returnValueLanguage\n          ),\n          false,\n          false,\n          false,\n          false,\n          response\n        );\n      });\n  };\n\n  removeLeftHeaderPluginBtn.onclick = function () {\n    removeHeaderPlugin(\"left\");\n  };\n\n  removeRightHheaderPluginBtn.onclick = function () {\n    removeHeaderPlugin(\"right\");\n  };\n\n  submitLoggingBtn.onclick = function () {\n    var chosenLogging = document.getElementById(\"changeLoggingInput\").value;\n    changeOptionsAPI(i18n_returnValueLogging, chosenLogging);\n  };\n\n  submitRobotsBtn.onclick = function () {\n    var chosenRobots = document.getElementById(\"changeRobotsInput\").value;\n    changeOptionsAPI(i18n_returnValueRobots, chosenRobots);\n  };\n}\n\nfunction removeHeaderPlugin(side) {\n  fetch(\"/api/usersettings\")\n    .then((res) => res.json())\n    .then((data) => {\n      data.headerPlugins[side].name = \"\";\n      data.headerPlugins[side].options = \"\";\n\n      var raw = JSON.stringify(data);\n\n      fetch(\"/api/usersettingswrite\", universe.CreateJSONPOSTHeaders(raw))\n        .then((response) => response.json())\n        .then((result) => {\n          if (result == \"Success\") {\n            universe.SnackbarCommon(\n              \"snackbar\",\n              langHandler.UnicornComposite(\n                i18n_returnsSuccessUpdate,\n                i18n_returnValueHeaderPlugin\n              )\n            );\n          } else {\n            universe.SnackbarError(\n              \"snackbar\",\n              i18n_returnValueGenericError,\n              false,\n              result\n            );\n          }\n        });\n    });\n}\n\nfunction changeOptionsAPI(item, value) {\n  console.log(value);\n  fetch(`/api/change?id=${item}&value=${value.trim()}`)\n    .then((res) => {\n      if (doesJSONParse(res)) {\n        return res.json();\n      } else {\n        return res.text();\n      }\n    })\n    .then((data) => {\n      if (data.includes(\"Error\")) {\n        universe.SnackbarError(\n          \"snackbar\",\n          i18n_returnValueGenericError,\n          false,\n          data\n        );\n      } else {\n        universe.SnackbarCommon(\n          \"snackbar\",\n          langHandler.UnicornComposite(i18n_returnsSuccessUpdate, item)\n        );\n      }\n    });\n}\n\nfunction doesJSONParse(data) {\n  try {\n    JSON.parse(data);\n    return true;\n  } catch (err) {\n    return false;\n  }\n}\n",
    "static": true,
    "longname": "D:/Personal Documents/GitHub Repositories/GoPage/assets/js/settings.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 85,
    "kind": "function",
    "name": "onload",
    "memberof": "js/settings.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/settings.js~onload",
    "access": null,
    "export": false,
    "importPath": "GoPage/js/settings.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true
  },
  {
    "__docId__": 86,
    "kind": "function",
    "name": "onclickHandlers",
    "memberof": "js/settings.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/settings.js~onclickHandlers",
    "access": null,
    "export": false,
    "importPath": "GoPage/js/settings.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true
  },
  {
    "__docId__": 87,
    "kind": "function",
    "name": "removeHeaderPlugin",
    "memberof": "js/settings.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/settings.js~removeHeaderPlugin",
    "access": null,
    "export": false,
    "importPath": "GoPage/js/settings.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 55,
    "undocument": true
  },
  {
    "__docId__": 88,
    "kind": "function",
    "name": "changeOptionsAPI",
    "memberof": "js/settings.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/settings.js~changeOptionsAPI",
    "access": null,
    "export": false,
    "importPath": "GoPage/js/settings.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 87,
    "undocument": true
  },
  {
    "__docId__": 89,
    "kind": "function",
    "name": "doesJSONParse",
    "memberof": "js/settings.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/settings.js~doesJSONParse",
    "access": null,
    "export": false,
    "importPath": "GoPage/js/settings.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 114,
    "undocument": true
  },
  {
    "__docId__": 90,
    "kind": "file",
    "name": "js/universal.js",
    "content": "// Stored only for functions used on every page or nearly every page\n\n/**\n* @member {File} UniversalJS\n* @desc JavaScript file loaded with every single page for Universal Functions\n*/\n\nloadTimeStamp();\nupdaterTimeStamp();\ncheckCustomBackgroundImage();\n\n/**\n* @desc Loads the TimeStamp and modifies the HTML to reflect the current time.\n* @memberof UniversalJS\n*/\nfunction loadTimeStamp() {\n  if (document.getElementById(\"timeStamp\") != null) {\n    const dateToDisplay = new Date();\n    document.getElementById(\n      \"timeStamp\"\n    ).innerHTML = `<h2>${dateToDisplay.toLocaleTimeString()} ${dateToDisplay.toLocaleDateString()}</h2>`;\n  }\n}\n\n/**\n* @desc Uses `setInterval` to call `loadTimeStamp()` every 1000 milliseconds (1 Second)\n* @memberof UniversalJS\n* @implements {loadTimeStamp()}\n*/\nfunction updaterTimeStamp() {\n  // This function is purely for making any updates as needed.\n\n  // This first function should update the time shown every second.\n  setInterval(loadTimeStamp, 1000);\n}\n\nwindow.addEventListener(\"DOMContentLoaded\", () => {\n  //langHandler.DetermineLang().then(() => {\n  // once this returns, we can start a lookup of the strings\n  //langHandler.InsertLang();\n  // Testing the new Metered connection to reduce network abuse\n  //langHandler.InsertLangMetered();\n  //});\n  // with translations now part of templating, we no longer need to do a lookup at page load.\n});\n\n/**\n* @desc Queries GoPage APIs to determine and set a background image if needed, injecting it into the DOM.\n* @memberof UniversalJS\n*/\nfunction checkCustomBackgroundImage() { /*eslint-disable-line no-redeclare*/\n  // This will be used to see if a background image is set, and load it if it is\n  fetch(\"/api/usersettings\")\n    .then((res) => res.json())\n    .then((data) => {\n      if (data.customBackground.set) {\n        //var locString = `/assets/userImages/test.jpg`;\n        var locString = `/assets/userImages/${data.customBackground.src}`;\n        try {\n          // It seems odly enough this wouldn't accept building this string as I normally would. But this does work\n          document.body.style.backgroundImage = \"url('\" + locString + \"')\";\n          // The rest of these values should be ignored in the future, and left up to CSS to ensure a responsive image design.\n          // the rest of these values should be taken from the JSON data\n\n          // Valid Values: repeat, repeat-x, repeat-y, no-repeat, initial, inherit :: https://www.w3schools.com/jsref/prop_style_backgroundrepeat.asp\n          //document.body.style.backgroundRepeat = data.customBackground.repeat;\n\n          // Valid Values: auto, length, percentage, cover, contain, initial, inherit :: https://www.w3schools.com/jsref/prop_style_backgroundsize.asp\n          //document.body.style.backgroundSize = data.customBackground.size;\n        } catch (err) {\n          console.log(err);\n        }\n      } else {\n        // image is not set\n        // but since this will be called to hotreload the visible background image, this will also remove any url there.\n        try {\n          document.body.style.backgroundImage = \"\";\n        } catch (err) {\n          console.log(err);\n        }\n      }\n    });\n}\n",
    "static": true,
    "longname": "D:/Personal Documents/GitHub Repositories/GoPage/assets/js/universal.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 91,
    "kind": "function",
    "name": "loadTimeStamp",
    "memberof": "js/universal.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/universal.js~loadTimeStamp",
    "access": null,
    "export": false,
    "importPath": "GoPage/js/universal.js",
    "importStyle": null,
    "description": "Loads the TimeStamp and modifies the HTML to reflect the current time.",
    "lineNumber": 16
  },
  {
    "__docId__": 92,
    "kind": "function",
    "name": "updaterTimeStamp",
    "memberof": "js/universal.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/universal.js~updaterTimeStamp",
    "access": null,
    "export": false,
    "importPath": "GoPage/js/universal.js",
    "importStyle": null,
    "description": "Uses `setInterval` to call `loadTimeStamp()` every 1000 milliseconds (1 Second)",
    "lineNumber": 30,
    "unknown": [
      {
        "tagName": "@implements",
        "tagValue": "{loadTimeStamp()}"
      }
    ]
  },
  {
    "__docId__": 93,
    "kind": "function",
    "name": "checkCustomBackgroundImage",
    "memberof": "js/universal.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/universal.js~checkCustomBackgroundImage",
    "access": null,
    "export": false,
    "importPath": "GoPage/js/universal.js",
    "importStyle": null,
    "description": "Queries GoPage APIs to determine and set a background image if needed, injecting it into the DOM.",
    "lineNumber": 51
  },
  {
    "__docId__": 94,
    "kind": "file",
    "name": "js/universe.js",
    "content": "/**\n* @member {File} UniverseJS\n* @desc Namespace of functions for easy access to repeatable actions.\n*/\n// This will be a namespace to handle common functions and features within GoPage\n// Aimed at reducing complexity, and duplicity\n\n// Since a global variable within eslint is defined here, we turn off the redeclare warning\n/**\n* The namespace to access all internal functions.\n* @namespace\n* @memberof UniverseJS\n*/\nvar universe = { /*eslint-disable-line no-redeclare, no-unused-vars*/\n  /**\n  * @desc Common method for creating Snackbars onscreen, usually not directly accessed, instead accessed through a higher level function.\n  * @implements {ShowTemplateModal()}\n  * @param {string} id Div ID of the Snackbar to target.\n  * @param {string} textToShow The Text that will appear within the Snackbar.\n  * @param {function} [callback] Optional function to execute after the Snackbar has disappeared.\n  * @param {string} [extraClass] Optional className to provide. Not needed to be set when accessing from a higher function.\n  * @param {string} [img] Optional Relative path to an Image Icon to display alongside the text.\n  * @param {string} [alt] Optional ALT tag for the Image thats being displayed.\n  * @param {string} [additionalDetails] Optional details that will show in a modal if the Snackbar image is clicked. Setting additional details also makes the Snackbar Image clickable.\n  * @example\n  * universe.SnackbarCommon(\"homePageSnackbar\", \"Success\", universe.ReloadCallback())\n  */\n  SnackbarCommon: function (\n    id,\n    textToShow,\n    callback,\n    extraClass,\n    img,\n    alt,\n    additionalDetails\n  ) {\n    // EXAMPLE:: universe.SnackbarCommon(\"homePageSnackbar\", \"Success\", universe.ReloadCallback())\n    // id = the div id of the snackbar to target, textToShow = the text that will appear within the div\n    // callback is an optional function to execute after the snackbar has disappeared.\n    // extraClass is an optional className to provide. Not needed to ever be set manually, with the snackbar Error function\n    // additionally contains img, a relative path to an image icon to display alongside the text\n    //    this is optional and will be set manually through use ot the SnackbarError\n    // the alt is a arg that should be filled automatically, but insures an equal experience no matter the user.\n\n    var snackbar = document.getElementById(id);\n\n    var snackbarMsg = snackbar.getElementsByClassName(\"msg\")[0];\n    var snackbarIcon = snackbar.getElementsByClassName(\"icon\")[0];\n\n    snackbarMsg.innerText = textToShow;\n\n    if (typeof img === \"string\") {\n      snackbarIcon.querySelector(\"img\").src = img;\n      snackbarIcon.querySelector(\"img\").alt = alt ? alt : \"\"; // protect the alt from an undeclared value just in case.\n    } else {\n      // ensure this is always set to default in case this page instance has multiple calls\n      snackbarIcon.querySelector(\"img\").src =\n        \"/assets/images/check-circle-white.svg\";\n      snackbarIcon.querySelector(\"img\").alt =\n        \"Check Mark with a Cirle surrounded it.\";\n    }\n\n    if (typeof additionalDetails === \"string\") {\n      // If additional details have been specified, we want to then allow the icon to be clickable\n\n      snackbar.className += \" clickable\";\n\n      var showModalTemplateHandler = () => {\n        this.ShowTemplateModal(additionalDetails);\n      };\n      snackbarIcon.onclick = function () {\n        showModalTemplateHandler();\n      };\n    }\n\n    if (typeof extraClass === \"string\") {\n      snackbar.className += extraClass;\n    }\n    snackbar.className += \" show\";\n\n    var eleAnim = document.getElementsByClassName(\"snackbar\")[0];\n    // this will get the snackbar bby the class, assuming only one exists on the page\n    // and will be used to hopefully sync the timeout of removing the element, and css animation\n\n    eleAnim.addEventListener(\"animationend\", function (event) {\n      // since the snackbar uses snack-fadein, and snack-fadeout\n      // we know we only want to exit when fadein finishes\n      if (event.animationName == \"snack-fadeout\") {\n        snackbar.className = snackbar.className.replace(\" show\", \"\");\n        if (typeof extraClass === \"string\") {\n          snackbar.className = snackbar.className.replace(extraClass, \"\");\n        }\n        // also remove the clickable class if the snackbar has extra details to show\n        if (typeof additionalDetails === \"string\") {\n          snackbar.className = snackbar.className.replace(\" clickable\", \"\");\n        }\n        if (typeof callback === \"function\") {\n          callback();\n        }\n      }\n    });\n  },\n  /**\n  * @desc Simple way to create an Error Snackbar, defaulting many values passed to SnackbarCommon.\n  * @implements {SnackbarCommon()}\n  * @param {string} id Div ID of Snackbar to target.\n  * @param {string} textToShow The Text that will appear within the Snackbar.\n  * @param {function} [callback] Optional function to execute after the Snackbar has disappeared.\n  * @param {string} [details] Optional details that will show in a modal if the Snackbar Image is clicked.\n  */\n  SnackbarError: function (id, textToShow, callback, details) {\n    // A simple way to invoke SnackbarCommon while assigning the error class to the snackbar\n    this.SnackbarCommon(\n      id,\n      textToShow,\n      callback,\n      \" error\",\n      \"/assets/images/info-white.svg\",\n      \"White Informational 'i' Icon\",\n      details\n    );\n  },\n  /**\n  * @desc Provides a simple way to reload the page within callbacks. Since the standard `location.reload()` losses scope inside a callback.\n  * @returns {function} Globally Scoped function to reload page: `window.location.reload.bind(window.location)`\n  */\n  ReloadCallback: function () {\n    // Since passing the standard location.reload() doesn't work within the callback as it losses the this scope\n    // we can bind it to the window.location, but this is a tad verbose.\n    // So defining it here as a return variable allows easy access, to pass this as a callback to the snackbar\n    return window.location.reload.bind(window.location);\n  },\n  CreateJSONPOSTHeaders: function (data) {\n    // This will take a JSON object and return the headers for a fetch request\n    // with the method being post, and providing json\n    var newHeaders = new Headers();\n\n    newHeaders.append(\"Content-Type\", \"application/json\");\n\n    var requestOptions = {\n      method: \"POST\",\n      headers: newHeaders,\n      body: data,\n      redirect: \"follow\",\n    };\n\n    return requestOptions;\n  },\n  ShowModal: function (id) {\n    // Used for displaying a modal, based on the provided id.\n    var modal = document.getElementById(id);\n    modal.style.display = \"block\";\n  },\n  CloseModal: function (id) {\n    // Used to close a modal, based on the provided id\n    var modal = document.getElementById(id);\n    modal.style.display = \"none\";\n  },\n  /**\n  * @desc Will show an onscreen modal assuming the Template Modal Page is used. And will handle the closing of said modal.\n  */\n  ShowTemplateModal: function (text) {\n    var modal = document.getElementById(\"modal\");\n    // since this is only for template modals, we can use a static ID\n    var modalText = modal.querySelector(\".msg\").querySelector(\"p\");\n\n    modalText.innerText = text;\n\n    var clearModalBtn = document.getElementById(\"clearModal\");\n    // assigning as an anonymous arrow function since it seems that the this context is defined during the onclick\n    // handler rather than during initialization of the onclick, causing the this namespace to be undefined, or at least\n    // have the CloseModal function undefined.\n    var closeTemplateModal = () => {\n      this.CloseModal(\"modal\");\n    };\n    clearModalBtn.onclick = function () {\n      closeTemplateModal();\n    };\n\n    this.ShowModal(\"modal\");\n  },\n  WriteUserSettings: function (requestOptions, successCallback, errorCallback) {\n    fetch(\"/api/usersettingswrite\", requestOptions)\n      .then((response) => response.json())\n      .then((result) => {\n        if (result == \"Success\") {\n          successCallback();\n        } else {\n          // error occured\n          errorCallback(result);\n        }\n      });\n  },\n  GenericErrorHandler: function (snackbar, msg) {\n    // For a generic error we want to do two things.\n    // Log the error to console, and then create the snackbar.\n    console.log(msg);\n    universe.SnackbarError(snackbar, `Error: ${msg}`);\n\n    // TODO: This method is outdated\n  },\n  FindReturnsString: function (action, status) {\n    // This requires that the returnsGlobalJS template is used.\n    // this will use the global translated strings, to help find the right return action string\n    // made especially for use with the snackbar.\n    // Also note that likely anything returned here will be a composite string\n    // Valid Values:\n    //    action: delete, install, update\n    //    status: pass, fail\n    if (status != \"pass\" && status != \"fail\") {\n      console.log(`universe.FindReturnString: Invalid status: ${status}`);\n      return false;\n    } else {\n      if (action != \"delete\" && action != \"install\" && action != \"update\") {\n        console.log(`universe.FindReturnString: Invalid action: ${action}`);\n        return false;\n      } else {\n        if (action == \"delete\" && status == \"pass\") {\n          return i18n_returnsSuccessDelete;\n        } else if (action == \"delete\" && status == \"fail\") {\n          return i18n_returnsFailureDelete;\n        } else if (action == \"install\" && status == \"pass\") {\n          return i18n_returnsSuccessInstall;\n        } else if (action == \"install\" && status == \"fail\") {\n          return i18n_returnsFailureInstall;\n        } else if (action == \"update\" && status == \"pass\") {\n          return i18n_returnsSuccessUpdate;\n        } else if (action == \"update\" && status == \"fail\") {\n          return i18n_returnsFailureUpdate;\n        }\n      }\n    }\n  },\n  HotReload: function (elementID, url, callback, callbackArg) {\n    // this is a function to add hot-reload capabilities to pages.\n    // requiring both the ID of the element to replace, and the url to query\n    // for the hot reload data.\n    // now it also supports a callback if one is needed to initialize or reload parts of a page\n    if (typeof elementID === \"string\" && typeof url === \"string\") {\n      var newHeaders = new Headers();\n\n      // append the custom hot-reload headers that go server will look for\n      newHeaders.append(\"GoPage-Action\", \"hot-reload\");\n\n      var requestOptions = {\n        headers: newHeaders,\n      };\n\n      fetch(url, requestOptions)\n        .then((response) => response.text())\n        .then((data) => {\n          var e = document.getElementById(elementID);\n          e.innerHTML = data;\n\n          if (typeof callback === \"function\") {\n            if (typeof callbackArg === \"string\") {\n              callback(callbackArg);\n            } else {\n              callback();\n            }\n          }\n        })\n        .catch((err) => {\n          console.error(`universe.HotReload ERROR: ${err}`);\n        });\n    } else {\n      console.error(\n        `Invalid args passed to universe.HotReload! Element ID: ${elementID}, URL: ${url}`\n      );\n    }\n  },\n  Loader: function (shouldShow) {\n    // 1st argument shouldShow = boolean specifying weather this is turning it off, or on\n    var loaderEle = document.getElementsByClassName(\"loader\")[0];\n\n    if (typeof shouldShow === \"boolean\") {\n      if (shouldShow) {\n        loaderEle.style.display = \"flex\";\n      } else {\n        loaderEle.style.display = \"none\";\n      }\n    } else {\n      console.log(\n        \"Loader expects first argument Boolean of whether or not to show the loader.\"\n      );\n    }\n  },\n};\n",
    "static": true,
    "longname": "D:/Personal Documents/GitHub Repositories/GoPage/assets/js/universe.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 95,
    "kind": "variable",
    "name": "universe",
    "memberof": "js/universe.js",
    "static": true,
    "longname": "js/universe.js~universe",
    "access": null,
    "export": false,
    "importPath": "GoPage/js/universe.js",
    "importStyle": null,
    "description": "The namespace to access all internal functions.",
    "lineNumber": 14,
    "unknown": [
      {
        "tagName": "@namespace",
        "tagValue": ""
      }
    ]
  },
  {
    "__docId__": 96,
    "kind": "file",
    "name": "js/uploadImage.js",
    "content": "/**\n* @member {File} UploadImageJS\n* @desc The JavaScript file loaded with the Upload Image Page.\n*/\n\n/**\n* @desc Builds the main content of the UploadImage Page. By using GoPage API's to check saved images, and display them.\n* @todo Inline with the Neutuer JavaScript Initiative, this should be done in Golang, and injected into the template.\n* @memberof UploadImageJS\n* @kind function\n*/\nfunction loadAvailableImages() {\n  // first we want to grab the list of all images in the userImages dir\n  fetch(\"/userimages\")\n    .then((res) => res.json())\n    .then((data) => {\n      // Since this data is very roughly encoded we need to parse it accordingly\n      // each value is the filename, split by ,\n      var imageList = data.split(\",\");\n\n      var insertHTML = \"\";\n      insertHTML += \"<div class='image-row'>\";\n      for (var i = 0; i < imageList.length; i++) {\n        // since the gitignore was added to this folder, we need to ensure we don't grab it. Although in release builds it should be remvoed\n        if (imageList[i] != null && imageList[i] != \"\") {\n          // after validating this is good data, we also need to ensure to break the column every four lines\n\n          // we need to account for the first image-column entry\n          // the below will break up the images' column every four images by checking the modulus or remainder\n          if (i === 0) {\n            insertHTML += \"<div class='image-column'>\";\n            insertHTML += insertImg(imageList[i]);\n          } else if (i % 4 === 0) {\n            insertHTML += \"</div>\";\n            insertHTML += \"<div class='image-column'>\";\n            insertHTML += insertImg(imageList[i]);\n          } else {\n            insertHTML += insertImg(imageList[i]);\n          }\n        } // else likely invalid data\n      }\n      // then in case the last row of elements didn't contain a perfect four values, we want to check that the last div is closed\n      if (!insertHTML.endsWith(\"</div>\")) {\n        insertHTML += \"</div>\";\n      }\n      // then we want to close the div for the image row\n      insertHTML += \"</div>\";\n\n      document.getElementById(\"existingImages\").innerHTML = insertHTML;\n    });\n}\n\n/**\n* @desc Helps loadAvailableImages to build the page, by returned an HTML string\n* @returns {string} HTML typed string, containing an IMG DOM Element\n* @param {string} imageLoc is the URL to access the image.\n* @memberof UploadImageJS\n*/\nfunction insertImg(imageLoc) {\n  var imgSrc = `/assets/userImages/${imageLoc}`;\n  return `<img src=\"${imgSrc}\" onclick=\"setImage('${imageLoc}');\">`;\n}\n\n/**\n* @desc Will attempt to save the specified image as the Users background image.\n* @param {string} name is the name of the image you want to set as the background image.\n* @memberof UploadImageJS\n*/\nfunction setImage(name) { /*eslint-disable-line no-unused-vars*/\n  fetch(\"/api/usersettings\")\n    .then((res) => res.json())\n    .then((data) => {\n      // with the originally config we want to modify this to use the image selected\n      data.customBackground.set = true;\n      data.customBackground.src = name;\n\n      const successHandler = function () {\n        universe.SnackbarCommon(\n          \"snackbar\",\n          langHandler.UnicornComposite(\n            i18n_generatedUploadSuccessSnackbar,\n            name\n          )\n        );\n        checkCustomBackgroundImage();\n        // this shhould call the function from universal.js\n      };\n\n      universe.WriteUserSettings(\n        universe.CreateJSONPOSTHeaders(JSON.stringify(data)),\n        successHandler,\n        function (err) {\n          universe.SnackbarError(\n            \"snackbar\",\n            i18n_returnValueGenericError,\n            false,\n            err\n          );\n        }\n      );\n      // The above is attempted to be simplified to the greatest extent.\n      // WriteUserSettings(requestOptions, successCallback, errorCallback)\n      // requestOptions: CreateJSONPOSTHeaders with the stringified Data.\n      // successCallback: The defined const successHandler. Which must be defined to contain logic of Composite String Method\n      // errorCallback: An inline function taking the err passed, and then passing that to the GenericErrorHandler with the proper snackbar id\n    });\n}\n\n/**\n* @desc Will query GoPage API's to remove whatever is currently set as the User Image\n* @memberof UploadImageJS\n*/\nfunction unsetImage() { /*eslint-disable-line no-unused-vars*/\n  fetch(\"/api/usersettings\")\n    .then((res) => res.json())\n    .then((data) => {\n      // with the originally config we want to modify this to set it to fase\n      data.customBackground.set = false;\n\n      // then to post this data back to GoPage\n\n      var successHandler = function () {\n        universe.SnackbarCommon(\"snackbar\", i18n_generatedRemoveImageSuccess);\n        checkCustomBackgroundImage();\n      };\n\n      universe.WriteUserSettings(\n        universe.CreateJSONPOSTHeaders(JSON.stringify(data)),\n        successHandler,\n        function (err) {\n          universe.SnackbarError(\n            \"snackbar\",\n            i18n_returnValueGenericError,\n            false,\n            err\n          );\n        }\n      );\n    });\n}\n\nloadAvailableImages();\n",
    "static": true,
    "longname": "D:/Personal Documents/GitHub Repositories/GoPage/assets/js/uploadImage.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 97,
    "kind": "function",
    "name": "loadAvailableImages",
    "memberof": "js/uploadImage.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/uploadImage.js~loadAvailableImages",
    "access": null,
    "export": false,
    "importPath": "GoPage/js/uploadImage.js",
    "importStyle": null,
    "description": "Builds the main content of the UploadImage Page. By using GoPage API's to check saved images, and display them.",
    "lineNumber": 12,
    "todo": [
      "Inline with the Neutuer JavaScript Initiative, this should be done in Golang, and injected into the template."
    ]
  },
  {
    "__docId__": 98,
    "kind": "function",
    "name": "insertImg",
    "memberof": "js/uploadImage.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/uploadImage.js~insertImg",
    "access": null,
    "export": false,
    "importPath": "GoPage/js/uploadImage.js",
    "importStyle": null,
    "description": "Helps loadAvailableImages to build the page, by returned an HTML string",
    "lineNumber": 59,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} HTML typed string, containing an IMG DOM Element"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "imageLoc",
        "description": "is the URL to access the image."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "HTML typed string, containing an IMG DOM Element"
    }
  },
  {
    "__docId__": 99,
    "kind": "function",
    "name": "setImage",
    "memberof": "js/uploadImage.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/uploadImage.js~setImage",
    "access": null,
    "export": false,
    "importPath": "GoPage/js/uploadImage.js",
    "importStyle": null,
    "description": "Will attempt to save the specified image as the Users background image.",
    "lineNumber": 69,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "is the name of the image you want to set as the background image."
      }
    ]
  },
  {
    "__docId__": 100,
    "kind": "function",
    "name": "unsetImage",
    "memberof": "js/uploadImage.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "js/uploadImage.js~unsetImage",
    "access": null,
    "export": false,
    "importPath": "GoPage/js/uploadImage.js",
    "importStyle": null,
    "description": "Will query GoPage API's to remove whatever is currently set as the User Image",
    "lineNumber": 113
  },
  {
    "kind": "index",
    "content": "# GoPage\r\n\r\n>A simple Website Shortcut Dashboard written in Go.\r\n\r\n[![Lighthouse Performance](https://img.shields.io/badge/Lighthouse%20Performance%20-100%25-success)](#)\r\n[![Lighthouse Accessibility](https://img.shields.io/badge/Lighthouse%20Accessibility-100%25-success)](#)\r\n[![Lighthouse Best Practices](https://img.shields.io/badge/Lighthouse%20Best%20Practices-98.6%25-success)](#)\r\n[![Lighthouse SEO](https://img.shields.io/badge/Lighthouse%20SEO-100%25-success)](#)\r\n[![Lighthouse PWA](https://img.shields.io/badge/Lighthouse%20PWA-0%25-inactive)](#)\r\n\r\n[![Go Report Card](https://goreportcard.com/badge/github.com/confused-Techie/GoPage)](https://goreportcard.com/report/github.com/confused-Techie/GoPage)\r\n[![Codacy Badge](https://app.codacy.com/project/badge/Grade/aaadbe13d42448a6b4a942be881544c3)](https://www.codacy.com/gh/confused-Techie/GoPage/dashboard?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=confused-Techie/GoPage&amp;utm_campaign=Badge_Grade)\r\n[![code style: prettier](https://img.shields.io/badge/code_style-prettier-ff69b4.svg?style=flat-square)](https://github.com/prettier/prettier)\r\n\r\n[![Latest Release](https://badgen.net/github/release/confused-Techie/GoPage)](https://github.com/confused-Techie/GoPage/releases/latest)\r\n[![License](https://badgen.net/github/license/confused-Techie/GoPage)](https://github.com/confused-Techie/GoPage/blob/main/LICENSE)\r\n[![Last Commit](https://img.shields.io/github/last-commit/confused-Techie/GoPage)](https://github.com/confused-Techie/GoPage/commits/main)\r\n\r\n[![Crowdin](https://badges.crowdin.net/gopage/localized.svg)](https://crowdin.com/project/gopage)\r\n[![Documentation](/docs/devDocs/badge.svg)](/docs/devDocs/JavaScript.md)\r\n\r\nGoPage has been made with the goal of extreme simplicity and convenient extensibility. Where standalone it's a simplistic way to store and manage Links to pages giving them unique user-defined categories, with easy ability to edit them down the line. And if you mix in the existing plugins and extreme ease of creating new ones gives life to these Links to show you the data needed at a moments glance.\r\n\r\n![Example of GoPage HomePage](/docs/assets/homepage-utilized-0.4.png)\r\n>An Image of GoPage Version 0.4 with Plugins: Favicon Swiper, Status Check, Jellyfin API, Pihole API, AQI Current installed.\r\n\r\n![GoPage Link Item Closeup](/docs/assets/link-item-closeup-0.4.gif)\r\n>Closeup of GoPage Link Item pointing at a Jellyfin Self Hosted Instance. Using Plugins Favicon Swiper, Status Check, Jellyfin API.\r\n\r\n## Features\r\n\r\n* Full Theme Support from Installed Plugins\r\n* Custom Background Images\r\n* Plugin Repo Page:\r\n  * Ability to update Available Plugins\r\n  * Install/Uninstall Existing Plugins\r\n* Link Health Page:\r\n  * Alerts of Exact Duplicate Links\r\n  * Alerts of Hostname Duplicate Links\r\n* GoPage has full support for translations, but does need additional contributions to support more languages.\r\n  * English: 100%\r\n  * Spanish: 100%\r\n  * Chinese Traditional: 100%\r\n\r\n![Translations Progress](https://badges.awesome-crowdin.com/translation-15135739-498245.png)\r\n\r\n## Installation\r\n\r\n### Docker\r\n\r\nThe installation for Docker should be universal for Linux, and Windows, taking only a few commands.\r\n\r\n  * First just download the Container\r\n  * And run it using whatever Port you prefer, giving a name if you'd like, optionally setting the language.\r\n\r\n````(bash)\r\ndocker pull ghcr.io/confused-techie/gopage:0.4\r\n\r\ndocker run -p 7070:8080 -e LANG=\"en\" --name GoPageServer ghcr.io/confused-techie/gopage:0.4\r\n````\r\n\r\n  * Please keep in mind the **7070** shown here can be whatever port you want the Docker Container Exposed on. Whereas **8080** is the default port the GoPage Server will listen to within the container.\r\n\r\n  * The `LANG` option is to set the GoPage Server Language. Ensuring to use the [ISO 639-1 two character language abbreviation.](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes)\r\n\r\n### Windows\r\n\r\nIf you'd just like to give this a quick go or aren't a fan of Docker you can install the Windows Only Application in the releases Section. [V0.4 Available Here](https://github.com/confused-Techie/GoPage/releases/tag/v0.4)\r\n\r\n  * Simply download the installer and run it, walking through the options it shows. Keep in mind the resulting application must be running in order for you to be able to connect to the GoPage Dashboard.\r\n\r\n## First Time Configuration\r\n\r\nOnce you've installed GoPage Dashboard you will be able to navigate to it like so\r\n\r\n````(bash)\r\nhttp://SERVER-IP:PORT/\r\n````\r\n\r\nOnce there you can get started by adding new Links by hitting 'Add New Item' and filling in the details on the next page.\r\n\r\n  * Friendly Name: Will be the name shown to you when you look at this Link.\r\n  * Link: Of Course is the actual Link to navigate to.\r\n  * Category: Is if you so choose a Category you can create for this link, to later on help you find it again. This section will suggest any previously created categories but can always be something new.\r\n\r\nIf you haven't installed any plugins at this point you can ignore the different Plugin Sections and hit 'Submit'\r\n\r\nOtherwise if you'd like to get started with some plugins to extend the functionality of GoPage you can navigate to Settings via the Gear Icon in the top left corner then hitting the GoTo button on the right side of the 'Plugin Repo' Listing under Tools.\r\n\r\nOr by navigating to:\r\n\r\n````\r\nhttp://SERVER-IP:PORT/pluginrepo\r\n````\r\n\r\nOnce here feel free to read through and explore the Plugins available and download them, which will then give you the ability to set them in the Plugin Fields of a New Link Item or while Editing a Link Item.\r\n\r\n## Plugins Available by Default\r\n\r\nMany Plugins have already been created for GoPage and are available by default after installation.\r\n\r\n  * Status Check: Simple way to see if the address is currently reachable.\r\n  * Favicon Swiper: Retrieve Favicons via known methods or Google API's as a fallback.\r\n  * Jellyfin API: Get information about your Jellyfin Instance.\r\n  * Pihole API: Get information from your Pihole Instance.\r\n  * Light Theme: Simple Light Theme for those not loving the Dark Theme.\r\n  * Exaggerator Theme: Exaggerator Theme... Just Colourful.\r\n  * AQI Current: Get Air Quality Information at a glance. Via AirNow.gov.\r\n\r\n## [Contribute](docs/contribute.md)\r\n\r\n## Learning More\r\n\r\n### [Exploring GoPage](docs/exploringGopage.md)\r\n\r\n### [Exploring Plugins](docs/exploringPlugins.md)\r\n\r\n### [Creating Plugins](docs/createPlugins.md)\r\n",
    "longname": "D:\\Personal Documents\\GitHub Repositories\\GoPage\\README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"GoPage\",\n  \"version\": \"0.0.4\",\n  \"description\": \"A simple Website Shortcut Dashboard written in Go.\",\n  \"main\": \"\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"minify-css\": \"powershell scripts/minify-css.ps1\",\n    \"minify-js\": \"powershell scripts/minify-js.ps1\",\n    \"lint\": \"powershell scripts/linting.ps1\",\n    \"complexity\": \"powershell scripts/complexity.ps1\",\n    \"ignore\": \"compactignore .\",\n    \"esdoc\": \"./node_modules/.bin/esdoc\",\n    \"jsdoc-md\": \"./node_modules/.bin/jsdoc2md ./assets/js/*.js > ./docs/devDocs/JavaScript.md\",\n    \"testGulp\": \"gulp default\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/confused-Techie/GoPage\"\n  },\n  \"author\": \"confused-Techie\",\n  \"license\": \"AGPL-3.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/confused-Techie/GoPage/issues\"\n  },\n  \"homepage\": \"https://github.com/confused-Techie/GoPage#readme\",\n  \"devDependencies\": {\n    \"@confused-techie/compactignore\": \"^1.0.0\",\n    \"complexity-report\": \"^2.0.0-alpha\",\n    \"cssnano\": \"^5.0.16\",\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-coverage-plugin\": \"^1.1.0\",\n    \"gulp\": \"^4.0.2\",\n    \"gulp-concat-css\": \"^3.1.0\",\n    \"jsdoc\": \"^3.6.10\",\n    \"jsdoc-to-markdown\": \"^7.1.1\",\n    \"postcss\": \"^8.4.5\",\n    \"postcss-cli\": \"^9.1.0\",\n    \"prettier\": \"^2.5.1\",\n    \"prettier-plugin-go-template\": \"0.0.11\",\n    \"terser\": \"^5.10.0\"\n  },\n  \"overrides\": {\n    \"glob-parent\": \"^5.1.2\"\n  },\n  \"dependencies\": {}\n}\n",
    "longname": "D:\\Personal Documents\\GitHub Repositories\\GoPage\\package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]
/* This is all rewritten CSS, in my attempt to not only get CSS to work
But to actually understand it.
As to be honest I've hated CSS for years. */

body {
  /* Styles applied to the entire body */
  background-color: #1a1a1a;
  /* Dark mode for the background */
  color: white;
  /* Colour of the text */
  margin-top: 0;
  margin-left: 0;
  margin-right: 0;
  /* remove user-agent margins to allow element to fill to edge of page */
}

a {
  /* Targets all links on the page */
  color: white;
}

.heading {
  background-color: #0d0d0d;
  text-align: center;
}

hr.heading {
  /* Targets the hr element, with class heading */
  border: 2px solid black;
}

.container {
  /* Targets the overall container for inner page content */

  width: 80%; /* Sets how large its width will be in the overall page */
  text-align: center;
  border-radius: 3px;
  overflow: hidden; /* Ensures this item will not scroll */
  padding: 20px; /* space around content WITHIN DIV */
  margin: auto; /* space OUTSIDE the DIV setting to auto should center it */
}

#btnContainer {
  /* Targets the ID btnContainer; Otherwise the top most row of buttons
  to select different item categories */
  overflow: hidden;
  background-color: #242424;
  color: white;
}

#btnContainer button {
  /* Targets the individual buttons within this category selector */
  background-color: inherit;
  color: inherit;

  border: none;
  outline: none;
  cursor: pointer;

  float: left;
  padding: 14px 16px;
  transition: 0.3s;

}

#btnContainer button:hover {
  background-color: #1c1c1c;
}

#btnContainer button.active {
  /* Targets the ID btnContainer button dom element with class active */
  background-color: #171616;
}

.itemContainer {
  /* Targets the container for EVERY Item listed */
  padding-top: 10px; /* space around content WITHIN DIV. intended to ensure items don't overlap */
  padding-left: 10px;
  padding-right: 10px; /* These give space for item listings from the top and sides of the category selector */
}

.filterDiv {
  /* Targets the container for EACH Item listed */
  background-color: #2b2b2b;
  text-align: center;

  border-radius: 3px;
  animation-name: fadeEffect;
  animation-duration: 0.5s;

  max-width: 50%;

  min-width: 30%;
  min-height: 10%; /* Set the min height and width, allowing them to grow, depnding on internal divs */

  display: none; /* Ensures item is not visible, until changed by js when showing the item */
  vertical-align: top; /* Aligns the top of the element and its descendants with the top of the entire line */

  margin-right: 5px; /* spacing outside the element, to give item lisitngs space between each other */
  margin-top: 5px;

  /*padding: 10px; /* Space between content and its borders WITHIN the div */

  position: relative; /* assigning this relative allows child elements positioned absolute to respect is boundries. */

  /* Below is the work to instead use grid layout */
  /*display: grid;
  grid-template-columns: repeat(3, 1fr);
  grid-column-gap: 5px;
  grid-auto-rows: minmax(auto, auto);*/
}

@keyFrames fadeEffect {
  from {opacity: 0;}
  to {opacity: 1;}
}

.item {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  grid-column-gap: 5px;
  /*grid-auto-rows: minmax(auto, auto);*/
  grid-row-gap: 5px;

  /*position: relative;*/
}

.show {
  /* Targets the show class attached to an Item Container via JS
  for which Items are currently visible */
  /*display: inline-block;*/
  /* While previously inline-block, to show the items, it needs to be grid */
  display: inline-block;
}

.itemName {
  /* Targets the Friendly Name of the Item */
  font-size: 1.5vw; /* Font size based on viewport width */

  margin-bottom: 5px; /* spacing outside the border of the text */
  grid-column: 2;
  grid-row: 1;
}

.plugin-left {
  /* The plugin Item of the Item */
  grid-column: 1;
  grid-row: 1;

  margin-top: 5px;
}

.plugin-center {
  grid-column: 2;
  grid-row: 2;

  margin-top: 5px;
}

.plugin-right {
  grid-column: 3;
  grid-row: 1;

  margin-top: 5px;
}

.editItem {
  /* editItem SVG element */
  bottom: 4px; /* Distance from edges of parent relatively placed div  */
  left: 4px;
  position: absolute;
  /* absolute: removes element from document flow, in this case positioning
  relative to the initial containing block. */

  grid-column: 1;
  grid-row: 2;
}

.deleteItem {
  /* deleteItem SVG element */
  bottom: 4px;
  right: 2px;
  position: absolute;
  /* the same as editItem */

  grid-column: 3;
  grid-row: 2;
}

.new-button-container {
  /* The New Item Button container for the form */
  text-align: center;
}

.new-button-container button {
  /* Button element in the New Item Button */
  background-color: #661294;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  padding: 10px; /* space around content WITHIN DIV */
}

.modal {
  /* The container of the modal */
  display: none; /* Hidden by default */
  position: fixed;
  z-index: 1; /* Sits on top */
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  overflow: auto; /* enable scroll if needed */
  bakground-color: inherit;
  background-color: rgba(0,0,0,0.4);
}

.modal-content {
  /* The internal content of the modal */
  background-color: #2b2b2b;
  margin: 15% auto; /* 15% from the top and centered */
  padding: 20px;
  border: 1px solid #000000;
  width: 40%;
  border-radius: 5px;
  text-align: center;
}

.modal-content .delete {
  /* The Model internal content confirming to delete button */
  background-color: #007523;
  color: white;
  border: none;
  padding: 10px;
  border-radius: 4px;
  cursor: pointer;
  margin: 5px;
}

.modal-content .notDelete {
  /* The Modal Internal content deciding not to delete */
  background-color: #261499;
  color: white;
  border: none;
  padding: 10px;
  border-radius: 4px;
  cursor: pointer;
  margin: 5px;
}

footer {
  /* The DOM element footer */
  border-top: 2px solid black;
  text-align: center;
  padding: 5px; /* space around the content within its DIV */
  background-color: #0d0d0d;
  color: white;

  position: fixed; /* removes the footer from the normal document flow.
        No space will be made for this element, having it in the same place on every page. */
  bottom: 0; /* bottom, top, left, right; determine its location within the page */
  left: 0;
  width: 100%; /* Ensures the item takes the entire width of the page */
}

footer p {
  /* text inside the DOM element footer */
  display: inline; /* Allows the text to be side by side */
  margin-right: 10px; /* Spacing outside the text element DIV
    to give them space between multiple text items to breath */
}
